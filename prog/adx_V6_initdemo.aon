rem ==========================================================================
rem --- adx_V6_initdemo.aon
rem --- Auto-Launch task that initializes V6demo environment.
rem --- 
rem --- AddonSoftware Version 16.00
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem ==========================================================================

    use java.io.File
    use ::ado_file.src::FileObject
    
    setesc std_error
    seterr std_error

rem --- Need to do the following for the V6demo to work properly
rem --- update_DD:
rem ---  1. Change opened_date field data type in ARM-01 to be Character as Binary
rem ---  2. Set date type for ART-03 invoice_date to 'AON'
rem --- rename_menus
rem ---  4. Rename addon.men and prbabs.men so they're not used - only using v6hybrid.men 

rem --- Get program arguments

    if argc>1
        for curr_argv=1 to argc-1
            temp_argv$=argv(curr_argv)
            if pos("-u"=temp_argv$)=1 user_id$=temp_argv$(3);rem User ID
        next curr_argv
    endif

    if user_id$=""
        use ::sys/prog/bao_security.bbj::Security
        user_id$=Security.getURLUser()
        if cvs(user_id$,2)="" then user_id$=stbl("+USER_ID",err=*next)
        if cvs(user_id$,2)="" then user_id$="ADMIN"
    endif

rem --- Initializations

    dir_syp$=stbl("+DIR_SYP")

    rem --- Make sure needed STBLs are set
    call stbl("+DIR_SYP")+"bas_process_beg.bbj",user_id$,rd_table_chans$[all]
    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)

rem --- Open File(s)
    
    num_files=2
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
    open_tables$[1]="ADS_AUTOLAUNCH",open_opts$[1]="OTA"
    open_tables$[2]="DDM_SYSTEMS",open_opts$[2]="OTA"

    gosub open_tables

    ads_autolaunch=num(open_chans$[1]);dim ads_autolaunch$:open_tpls$[1]
    ddm_systems=num(open_chans$[2]);dim ddm_systems$:open_tpls$[2]

rem --- Derive base installation directory for Addon

    readrecord(ddm_systems,key=pad("ADDON",16),dom=std_exit)ddm_systems$
    baseDir$=ddm_systems.mount_dir$
    baseDir$=FileObject.fixPath(baseDir$, "/")
    strip_pos=pos("/aon/"=cvs(baseDir$,2))
    if strip_pos
        baseDir$=baseDir$(1,strip_pos)
    else
        goto std_exit
    endif

rem --- Do the processing
    gosub update_DD
    gosub rename_menus
    
    goto done


update_DD:rem --- Make changes directly to BASIS DD for properties that can't be set/passed in from Barista

    rem --- Get Admin Object
    rdAdmin!=BBjAPI().getGroupNamespace().getValue("+bar_admin_"+cvs(user_id$,11),err=*next)
    rdNSAdmin!=null()

    if rdAdmin!=null() then return
    
    rdDatabase!=rdAdmin!.getDatabase(stbl("+DBNAME_API"))

    rem --- set opened dates on customer and vendor records to be type 'Character as Binary'
    custTable!=rdDatabase!.getTable("ARM01")
    custOpenedDate!=custTable!.getColumn("V6_OPENED_DATE")
    custOpenedDate!.setInt(BBjAdminColumn.FLAG,8)
    custOpenedDate!.setString(BBjAdminColumn.BBX_TYPE,"Z")
    custTable!.commit(err=*next)

    rem --- set date type on AR Invoice Header to 'AON'
    ARInvTable!=rdDatabase!.getTable("ART03")
    invoiceDate!=ARInvTable!.getColumn("V6_INVOICE_DATE")
    invoiceDate!.setString(BBjAdminBBjColumn.DATE_FORMAT,"AON")
    ARInvTable!.commit(err=*next)

    return
  
rename_menus:
rem --- Rename Addon's menu data/sync/ xml's (adm_mnu_item*.xml and adm_mnu_trans*.xml)
rem --- Also delete records from adm_mnu_item.dat and adm_mnu_trans.dat that have ADDON as the mount_sys_id
rem --- This should leave just the V6Hybrid menu in place
rem --- Note: this is new for v21 since menu is now table-based. Older versions simply renamed addon.men so Barista would only 'see' v6hybrid.men.

    sync_dir_dev=unt
    sync_dir$=baseDir$+"aon/data/sync/"
    open(sync_dir_dev)sync_dir$

    while 1
        readrecord (sync_dir_dev,end=*break)sync_file$
        syncFile!=sync_file$
        if (syncFile!.startsWith("adm_mnu_item") or syncFile!.startsWith("adm_mnu_trans")) and syncFile!.endsWith(".xml")
            menuFile!=new File(sync_dir$+syncFile!)
            rename_file$=sync_dir$+menuFile!.getName()+".V6H"
            newFile!=new File(rename_file$)
            rename menuFile!.getAbsolutePath() to newFile!.getAbsolutePath()
        endif
    wend
    
    close(sync_dir_dev)

    sql_chan=sqlunt
    sqlopen(sql_chan)stbl("+DBNAME")
    
    sql_prep$="DELETE FROM ADM_MNU_ITEM WHERE MOUNT_SYS_ID='ADDON'"
    sqlprep(sql_chan)sql_prep$
    sqlexec(sql_chan)

    sql_prep$="DELETE FROM ADM_MNU_TRANS WHERE MOUNT_SYS_ID='ADDON'"
    sqlprep(sql_chan)sql_prep$
    sqlexec(sql_chan)

    close(sql_chan)

    rdGlobalSpace!=BBjAPI().getGlobalNamespace()
    rdGlobalSpace!.setValue("+rebuild_menu","ALL")

    return

	
done: rem --- All done

    rem --- Update AutoLaunch Status
    extractrecord(ads_autolaunch,key="V6INITDEMO")ads_autolaunch$; rem Advisory Locking
    ads_autolaunch.process_status$="C"
    ads_autolaunch.trans_date$=date(0:"%Yl%Mz%Dz")
    ads_autolaunch.trans_time$=date(0:"%Hz%mz%sz")
    ads_autolaunch$=field(ads_autolaunch$)

    rem --- Use bax_mount_sel to get rdMountVect! containing hashes of mounted system and backup directory info for use in bax_xmlrec_exp.bbj
    dev_mode$=""
    call stbl("+DIR_SYP")+"bax_mount_sel.bbj",rdMountVect!,table_chans$[all],dev_mode$

    rem --- Update admin xml file
    if rdMountVect!<>null() and rdMountVect!.size()>0
        exp_action$="C"
        exp_add_only$=""
        call stbl("+DIR_SYP")+"bax_xmlrec_exp.bbj","ADS_AUTOLAUNCH",ads_autolaunch$,exp_action$,exp_add_only$,dev_mode$,rdMountVect!,table_chans$[all]
    endif

    writerecord(ads_autolaunch)ads_autolaunch$

	goto std_exit

open_tables:rem -----<Open Tables

    call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:       open_beg,
:       open_end,
:       open_tables$[all],
:       open_opts$[all],
:       open_chans$[all],
:       open_tpls$[all],
:       rd_table_chans$[all],
:       open_batch,
:       open_status$

    if open_status$<>""
        msg_id$="ENTRY_OPEN_ERROR"
        dim msg_tokens$[1]
            msg_tokens$[1]=open_status$
        gosub disp_message
        status=-1
    endif

    return

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

    return

rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release


rem #endinclude std_error.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    run stbl("+DIR_SYP",err=*next)+"bas_process_end.bbj",err=*next
    release

rem #endinclude std_end.src

    end
