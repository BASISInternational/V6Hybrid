rem --- Invoice Printing (Form)
rem --- Program opc_invoice.aon v8.0.0 12Jun2009 (opr_ca)
rem --- Created by adx_codeport.bbj v1.1.5 (06/12/2009 12:05:26)

rem --- AddonSoftware Version 8.0.0 - 27Jul2009
rem --- Copyright BASIS International Ltd.  All Rights Reserved.
rem --- All Rights Reserved

rem --- Send in a list of customer IDs and order numbers to print.

rem --- There are three sprocs and three .jaspers for this enhancement:
rem ---    - OPINVOICE_HDR.prc / OPInvoiceHdr.jasper
rem ---    - OPINVOICE_DET.prc / OPInvoiceDet.jasper
rem ---    - OPINVOICE_DET_LOTSER.prc / OPInvoiceDet-LotSer.jasper
rem ----------------------------------------------------------------------------

rem --- V6Demo --- altered for batch invoices to run against V6 database
rem --- Uses altered versions of the above SPROCs: 
rem ---    OPINVOICE_HDR_60.PRC
rem ---    OPINVOICE_DET_60.PRC
rem ---    OPINVOICE_DET_LOTSER_60.PRC

rem ----------------------------------------------------------------------------

batch_inv: rem --- Batch printing of invoices

    setesc std_error
    seterr std_error

    enter custIds!, orderNos!, restart$, restart_customer$, batch_adhoc_message$
   
    type = 2

rem --- Types of calls

    batch_inv  = 2
    
rem --- Use statements and Declares
    use ::bbjasper.bbj::BBJasperReport
    use ::bbjasper.bbj::BBJasperViewerWindow
    use ::bbjasper.bbj::BBJasperViewerControl

	declare BBJasperReport BBjReport!
	declare BBJasperViewerWindow BBjReportWindow! 
    
	params! = new java.util.HashMap()
	master_params! = new java.util.HashMap()
    print_params! = new java.util.HashMap()

    rem --- get SysGui
    num_files=1
    dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]
    open_tables$[1]=stbl("+GUI_DEVICE"),open_opts$[1]="O"
    gosub open_tables
    gui_dev=num(open_chans$[1])
		
    ScreenSize!   = bbjAPI().getSysGui().getSystemMetrics().getScreenSize()
    screen_width  = ScreenSize!.width - 200; rem keep it in the MDI w/ no scroll bars
    screen_height = ScreenSize!.height - 100
	
    use ::ado_func.src::func
    use ::ado_rptControl.src::ReportControl
    use ::sys/prog/bao_utilities.bbj::BarUtils

    declare BBjVector custIds!
    declare BBjVector orderNos!

rem --- Retrieve the program path

    pgmdir$=""
    pgmdir$=stbl("+DIR_PGM",err=*next)
    sypdir$=""
    sypdir$=stbl("+DIR_SYP",err=*next)

rem --- Set document Directory

    docdir$=""
    docdir$=stbl("+V6_DIR_PDF",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

    milestone=50
    milestone=num(stbl("+MILESTONE",err=*next),err=*next)
	    
rem --- Anything to print?

    if custIds!.size() = 0 or orderNos!.size() = 0 then
        goto all_done
    endif

rem --- Derive/set path and filename for logo to go on form
    
	logo_file$=stbl("+V6_CUST_IMAGES",err=*next)+stbl("+V6_FORM_LOGO",err=*next)
    logo_filename$=""
    if logo_file$<>""
        logo_chn=unt
        open (logo_chn,err=*endif)logo_file$
        logo_filename$=fid(logo_chn)(9)
        close (logo_chn)
    endif
	
    logofile$ = ""
    start_block = 1
    curr_path$=dsk("")+dir("")

rem --- Set Report Name & Subreport directory

    reportDir$ = stbl("+V6_DIR_REPORTS",err=*next)   
    temp = unt
    open (temp)reportDir$
    reportDir$ = fid(temp)(9)+"/"
    close (temp)
    reportBaseName$ = "OPInvoiceHdr"
    filename$ = reportDir$ + reportBaseName$ + ".jasper"
    masterBaseName$ = "OPInvoiceMaster"
    master_filename$ = reportDir$ + masterBaseName$+".jasper"
    printBaseName$ = "OPInvoicePrint"
    print_filename$ = reportDir$ + printBaseName$+".jasper"    

    declare BBJasperReport report!

rem --- Open Files    
    
	num_files=2
	dim open_tables$[1:num_files],open_opts$[1:num_files],open_chans$[1:num_files],open_tpls$[1:num_files]

    open_tables$[1]="ARE03", open_opts$[1] = "OTA"
    open_tables$[2]="ARE04", open_opts$[2] = "OTA"   
    
    gosub open_tables
    
    are03_dev = num(open_chans$[1])
    are04_dev = num(open_chans$[2])
    
    dim are03a$:open_tpls$[1]
    dim are04a$:open_tpls$[2]

rem --- V6demo - open params

ars01b: iolist r0$,r1$
ivs01a: iolist x$,x$,i2$,i3$

    rem --- open files
    files=1
    dim files$[files],options$[files],channels[files]
    files$[1]="SYS-01"

    call "SYC.DA",1,1,files,files$[all],options$[all],channels[all],batch,status

    if status then
        seterr 0
        x$=stbl("+THROWN_ERR","TRUE")   
        throw "File open error.",1001
    endif

    sys01_dev=channels[1]
    
rem --- init

    read (sys01_dev,key=firm_id$+"AR02",err=*next)iol=ars01b
    ar_phone_no$=""
    if len(r1$)>=112
        call stbl("+DIR_SYP")+"bac_getmask.bbj","T",cvs(r1$(103,10),2),"",phone_mask$ 
        ar_phone_no$=str(cvs(r1$(103,10),2):phone_mask$)
    endif

    read (sys01_dev,key=firm_id$+"IV00",err=*next)iol=ivs01a

rem --- Initialize Data

    call pgmdir$+"adc_getmask.aon","","AR","I","",cust_mask$,0,cust_size
    call pgmdir$+"adc_getmask.aon","","AR","A","",amt_mask$,0,amt_mask_size
    call pgmdir$+"adc_getmask.aon","","AR","U","",qty_mask$,0,qty_mask
    call pgmdir$+"adc_getmask.aon","","IV","P","",price_mask$,0,price_mask 
    
    ext_mask$ = amt_mask$

	rem --- Make the 'Patterns' used to mask in iReports from Addon masks
	rem       examples:
	rem          ##0.00;##0.00-   Includes negatives with minus at the end
	rem          ##0.00;-##0.00   Includes negatives with minus at the front
	rem          ##0.00;##0.00-   Positives only

	qty_mask_pattern$=fngetPattern$(qty_mask$)
	amt_mask_pattern$=fngetPattern$(amt_mask$)
	ext_mask_pattern$=fngetPattern$(ext_mask$)

	
    func.setLen1( int(num(i2$(9,2))) )
    func.setLen2( int(num(i2$(11,2))) )
    func.setLen3( int(num(i2$(13,2))) )
	   
    nothing_printed = 1
    
    alias$ = "OPR_INVOICE"
    rptctl_alias$ = alias$
    master_document=1
    print_document=1

    emailFax! = BBjAPI().makeVector()

rem --- See if this document is set up in Addon Report Control

    reportControl!=new ReportControl()
    reportControl!.setDocExtension("pdf")
    rpt_ctl$=reportControl!.getReportControl(rptctl_alias$)
    rpt_ctl$=iff(rpt_ctl$="","NO","YES")
    rpt_id$=iff(rpt_ctl$="YES",reportControl!.getReportID(),"")

rem --- Start progress meter 

    call pgmdir$+"adc_progress.aon","N",sysinfo.task_desc$,"","Printing","",0,0,1,0,status
    if status = 999 then goto all_done
		
rem --- Main Read

    for next_item = 0 to custIds!.size() - 1

        cust_id$ = str( custIds!.getItem(next_item) )
        order_no$ = str( orderNos!.getItem(next_item) )

        extract record(are03_dev,key=firm_id$+"  "+cust_id$+order_no$+"000",dom=*continue) are03a$; rem Advisory Locking 

	rem --- Is invoice Void?
		if are03a.V6_invoice_type$ = "V" 
			read(are03_dev)
			continue
		endif

    rem --- 
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,0,status
        if status = 999 then exitto all_done
        
        nothing_printed = 0			
        add_to_print_report = 0

    rem --- Make Document Archive Record and Get Document ID

        rep_date$=date(0:stbl("+DATE_MASK"))
        rep_date_stamp$=date(0:"%Yd%Mz%Dz")
        rep_time$=date(0:"%hz:%mz %p")
        rep_time_stamp$=date(0:"%Hz%mz%sz")

        new_doc_id$=""
        new_doc_name$=""
        doc_name$="OPInvoice_Cust"+are03a.v6_customer_nbr$+"_"+alias$
        doc_keywords$="Order: "+are03a.v6_order_number$+" Invoice: "+are03a.v6_ar_inv_nbr$

        rd_source_alias$=alias$
        rd_source_type$="O"
        rd_doc_source$="E"
        rd_doc_ext$="PDF"
        rd_source_id$="C"
        rd_source_ref$=are03a.v6_customer_nbr$
        rd_doc_keywords$=doc_keywords$


    rem --- Get Next Document Number and update Document Audit for individual pdf

        call stbl("+DIR_SYP")+"bas_sequences.bbj","DOC_NO",new_doc_id$,table_chans$[all] 
        new_doc_name$=new_doc_id$+"_"+doc_name$+".pdf"        
        
        call stbl("+DIR_SYP")+"bac_documents.bbj",new_doc_id$,rep_date_stamp$,rep_time_stamp$,rd_doc_source$,rd_doc_ext$,docdir$,
:           rd_source_type$,rd_source_alias$,rd_source_id$,rd_source_ref$,table_chans$[all],"",new_doc_name$,doc_name$,doc_keywords$

    rem --- Get Next Document Number and update Document Audit with JAS entry for master doc, if first time thru

        if master_document
            rd_doc_ext$="JAS"
            rd_archive_action$="DOC_ID-NOREPRINT"
            rd_doc_id$=""
            rd_source_id$="C"
            rd_source_ref$=""
            rd_doc_keywords$=""
            gosub document_whse
            rd_archive_action$=""
            master_doc_id$=rd_doc_id$
            master_doc_name$=master_doc_id$+"_"+masterBaseName$+".pdf"
        endif

    rem --- Get Next Document Number and update Document Audit with JAS entry for print doc, if first time thru

        if print_document
            rd_doc_ext$="JAS"
            rd_archive_action$="DOC_ID-NOREPRINT"
            rd_doc_id$=""
            rd_source_id$="C"
            rd_source_ref$=""
            rd_doc_keywords$=""
            gosub document_whse
            rd_archive_action$=""
            print_doc_id$=rd_doc_id$
            print_doc_name$=print_doc_id$+"_"+printBaseName$+".pdf"
        endif

    rem --- Use ReportControl object to see if customer wants print, email, or fax

        add_to_print_report=1
        if rpt_ctl$="YES"     
            found=reportControl!.getRecipientInfo(rpt_id$,cust_id$,"")
            if found         
                if reportControl!.getPrintYN()<>"Y" then add_to_print_report=0
                if reportControl!.getEmailYN()="Y" or reportControl!.getFaxYN()="Y"
                    emailFax!.add(rpt_id$)
                    emailFax!.add(cust_id$)
                    emailFax!.add(new_doc_id$)
                endif
            endif
        endif

    rem --- Report parameters  (Master/Print only processed once, followed by actual invoices)
		if master_document
			master_params!.put("RESTART",restart$)
			master_params!.put("RESTART_CUSTOMER",restart_customer$)
			master_params!.put("MESSAGE",batch_adhoc_message$)
		endif

		if print_document
			print_params!.put("RESTART",restart$)
			print_params!.put("RESTART_CUSTOMER",restart_customer$)
			print_params!.put("MESSAGE",batch_adhoc_message$)
		endif

		params!.put("FIRM_ID",are03a.v6_firm_id$)
		params!.put("AR_TYPE",are03a.v6_ar_type$)
		params!.put("CUSTOMER_ID",are03a.v6_customer_nbr$)
		params!.put("ORDER_NO",are03a.v6_order_number$)
        params!.put("AR_INV_NO",are03a.v6_ar_inv_nbr$)
		params!.put("QTY_MASK",qty_mask$)
		params!.put("QTY_MASK_PATTERN",qty_mask_pattern$)
		params!.put("PRICE_MASK",price_mask$)
		params!.put("AMT_MASK",amt_mask$)
		params!.put("AMT_MASK_PATTERN",amt_mask_pattern$)        
		params!.put("EXT_MASK",ext_mask$)
		params!.put("EXT_MASK_PATTERN",ext_mask_pattern$)  
		params!.put("CUST_MASK",cust_mask$)
		params!.put("CUST_SIZE",str(cust_size))
		params!.put("BARISTA_WD",dir(""))
		params!.put("LOGO_FILE",logo_filename$)
		params!.put("BATCH_MESSAGE",batch_adhoc_message$)
		params!.put("IVS_LOTSER_FLAG",i3$(17,1))
		
		params!.put("AR_ADDRESS1",r1$(1,30))
		params!.put("AR_ADDRESS2",r1$(31,24))
		params!.put("AR_ADDRESS3",r1$(55,24))
		params!.put("AR_ADDRESS4",r1$(79,24))
		params!.put("AR_PHONE_NO",ar_phone_no$)

		params!.put("REMIT1",r1$(1,30))
		params!.put("REMIT2",r1$(31,24))
		params!.put("REMIT3",r1$(55,24))
		params!.put("REMIT4",r1$(79,24))
		
    rem --- invoke jasper
        
        if master_document
            master_report! = BarUtils.getBBJasperReport(master_filename$)
            master_report!.putParams(master_params!)
            master_report!.setLocale(locale$)
            master_report!.fill()
            master_document=0
        endif

        if print_document
            print_report! = BarUtils.getBBJasperReport(print_filename$)
            print_report!.putParams(print_params!)
            print_report!.setLocale(locale$)
            print_report!.fill()
            print_document=0
        endif

        report! = BarUtils.getBBJasperReport(filename$)
        report!.putParams(params!)

        locale$ = stbl("!LOCALE")
        locale$ = stbl("+USER_LOCALE",err=*next)
        report!.setLocale(locale$)

        report!.fill()
        report!.exportToPDF(BBjAPI().FALSE, docdir$+new_doc_name$)

        master_report!.appendReport(report!)	
        if add_to_print_report then print_report!.appendReport(report!)

		report!.destroy()
		
    rem --- Loop back for next Customer/Order

    next next_item
    read (are03_dev);rem release final extract

rem --- bring up jasper viewers (master doc and print doc for Batch Invoices)

    declare BBJasperViewerWindow masterViewerWindow!
    declare BBJasperViewerWindow printViewerWindow!
    declare BBjTopLevelWindow bbjWindowMaster!
    declare BBjTopLevelWindow bbjWindowPrint!
    
    rem --- get a pdf path from +V6_DIR_PDF
    rem --- this will eventually be replaced with code to get output formats/types based on doc group and/or print settings
    gosub doc_path

rem --- master jasper - append ALL invoices
    repTitle$=masterBaseName$
    rd_doc_name$=master_doc_name$

    rd_doc_id$=master_doc_id$

    gosub OnMasterSaveMenuButton; rem --- always save to doc archive

    masterViewerWindow! = new BBJasperViewerWindow(master_report!,5,5,screen_width,screen_height,repTitle$,$00000093$)
    masterViewerControl! = masterViewerWindow!.getViewerControl()
    masterViewerControl!.setGoogleDefaultDocument(repTitle$)
    masterViewerControl!.setDefaultSaveFolder(rd_doc_path$)
    masterViewerControl!.setDefaultSaveFile(repTitle$)
    masterViewerControl!.setFitWidth()

    rem --- set callbacks for when user presses save or email buttons in jasper viewer
    rem --- note: saveAs or saveAsGDoc not intercepted, just regular save
    masterSaveMenuButton! = masterViewerControl!.getControl(BBJasperViewerControl.getSAVE_MENU_BUTTON_NAME())
    masterSaveMenuButton!.setCallback(BBjMenuButton.ON_BUTTON_PUSH ,"OnMasterSaveMenuButton")
    masterEmailToolButton! = masterViewerControl!.getControl(BBJasperViewerControl.getEMAIL_TOOL_BUTTON_NAME())
    masterEmailToolButton!.setCallback(BBjMenuButton.ON_TOOL_BUTTON_PUSH ,"OnMasterEmailToolButton")

    masterViewerWindow!.setReleaseOnClose(0)
    masterViewerWindow!.show(0)

    bbjWindowMaster!= masterViewerWindow!.getViewerWindow()
    bbjWindowMaster!.setCallback(bbjWindowMaster!.ON_CLOSE,"close_win")
    
rem --- print jasper - append only those marked for hard copy
    repTitle$=printBaseName$
    rd_doc_name$=print_doc_name$
    rd_doc_id$=print_doc_id$

    gosub OnPrintSaveMenuButton; rem --- always save to doc archive

    printViewerWindow! = new BBJasperViewerWindow(print_report!,50,50,screen_width,screen_height,repTitle$,$00000093$)
    printViewerControl! = printViewerWindow!.getViewerControl()
    printViewerControl!.setGoogleDefaultDocument(repTitle$)
    printViewerControl!.setDefaultSaveFolder(rd_doc_path$)
    printViewerControl!.setDefaultSaveFile(repTitle$)
    printViewerControl!.setFitWidth()

    printSaveMenuButton! = printViewerControl!.getControl(BBJasperViewerControl.getSAVE_MENU_BUTTON_NAME())
    printSaveMenuButton!.setCallback(BBjMenuButton.ON_BUTTON_PUSH ,"OnPrintSaveMenuButton")
    printEmailToolButton! = printViewerControl!.getControl(BBJasperViewerControl.getEMAIL_TOOL_BUTTON_NAME())
    printEmailToolButton!.setCallback(BBjMenuButton.ON_TOOL_BUTTON_PUSH ,"OnPrintEmailToolButton")

    printViewerWindow!.setReleaseOnClose(0)
    printViewerWindow!.show(0)

    bbjWindowPrint!= printViewerWindow!.getViewerWindow()
    bbjWindowPrint!.setCallback(bbjWindowPrint!.ON_CLOSE,"close_print_win")

rem --- Event Control

    process_events,err=*same

    release

document_whse:rem --- Write record to Barista document warehouse (ads_documents)
    call stbl("+DIR_SYP")+"bac_documents.bbj",
:       rd_doc_id$,
:       rep_date_stamp$,
:       rep_time_stamp$,
:       rd_doc_source$,
:       rd_doc_ext$,
:       rd_doc_path$,
:       rd_source_type$,
:       rd_source_alias$,
:       rd_source_id$,
:       rd_source_ref$,
:       table_chans$[all],
:       rd_archive_action$,
:       rd_doc_name$,
:       rep_title$,
:       rd_doc_keywords$

    return

doc_path:rem --- Get Document Path
rem --- forcing a pdf save to this location for release 13.03
rem --- eventually, want to make the save functionality mimic (as closely as possible) Barista
rem --- so it can save based on user's doc group and doc settings

    if rd_doc_path$="" then
        rd_tmp_dir$=stbl("+V6_DIR_PDF",err=*endif)
        rd_temp_wd$=dsk("")+dir("")
        if pos(":"=rd_tmp_dir$) setdrive rd_tmp_dir$(1,pos(":"=rd_tmp_dir$)-1),err=*next
        chdir rd_tmp_dir$,err=*next
        rd_doc_path$=dsk("")+dir("")
        if pos(":"=rd_temp_wd$) setdrive rd_temp_wd$(1,pos(":"=rd_temp_wd$)-1)
        chdir rd_temp_wd$
    endif

    return

OnMasterSaveMenuButton:

rem --- exportToPDF and record in doc warehouse

    if rd_doc_path$<>"" and repTitle$<>""

        rd_doc_ext$="PDF"
        rep_title$=repTitle$
        rd_source_id$="C"
        rd_source_ref$=""
        rd_doc_keywords$=""
       

        master_report!.exportToPDF(BBjAPI().FALSE, rd_doc_path$+rd_doc_name$)

        gosub document_whse
    endif
    return     

OnMasterEmailToolButton:rem --- Add document to fax/email queue
rem --- force exportToPDF first, in case it hasn't already been saved
    
    rem --- force exportToPDF in case not already saved
    gosub OnMasterSaveMenuButton

    if rd_doc_id$<>"" and rd_doc_ext$<>""
        call stbl("+DIR_SYP")+"bac_faxemail_jasper.bbj",rd_doc_id$,rd_doc_ext$,table_chans$[all]
    endif
    return

OnPrintSaveMenuButton:
rem --- exportToPDF and record in doc warehouse

    if rd_doc_path$<>"" and repTitle$<>""
        rd_doc_ext$="PDF"


        rep_title$=repTitle$
        rd_source_id$="C"
        rd_source_ref$=""
        rd_doc_keywords$=""
        
        print_report!.exportToPDF(BBjAPI().FALSE, rd_doc_path$+rd_doc_name$)

        gosub document_whse
    endif
    return    

OnPrintEmailToolButton:rem --- Add document to fax/email queue
rem --- force exportToPDF first, in case it hasn't already been saved
    
    rem --- force exportToPDF in case not already saved
    gosub OnPrintSaveMenuButton

    if rd_doc_id$<>"" and rd_doc_ext$<>""
        call stbl("+DIR_SYP")+"bac_faxemail_jasper.bbj",rd_doc_id$,rd_doc_ext$,table_chans$[all]
    endif
    return

close_win:rem --- Master or On-demand viewer closed - do post-processing for batch vs single

    ok_to_close=1
    if !print_win_closed
        msg_id$ = "CONF_CLOSE_PRINT"
        gosub disp_message
        if msg_opt$<>"Y" then ok_to_close=0 
    endif
    
    if !ok_to_close then return
  
    msg_id$ = "OP_INVOICE_UPDATE"
    gosub disp_message
    if msg_opt$<>"Y" then goto all_done
    
    call pgmdir$+"adc_progress.aon","N",sysinfo.task_desc$,"","Updating","",0,0,1,0,status
    if status = 999 then goto all_done    

    read (are04_dev,key=firm_id$+"I",dom=*next)

    rem --- Update loop Batch Invoice

    while 1
        are04ky$=key(are04_dev,end=*break);read (are04_dev)
        if are04ky$(1,3)<>firm_id$+"I" then break
        call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,0,status
        if status = 999 then exitto all_done

        extract record (are03_dev,key=are04ky$(1,2)+are04ky$(4)+"000", dom=*continue) are03a$
        if are03a.v6_print_status$="B"
            are03a.v6_print_status$="Y"
            are03a.v6_lock_status$="N"
            are03a$=field(are03a$)
            write record (are03_dev,key=are03a.v6_firm_id$+are03a.v6_ar_type$+are03a.v6_customer_nbr$+are03a.v6_order_number$+"000")are03a$
        else
            read record (are03_dev);rem release extract
        endif
        
    wend

    if emailFax!.size()
        for email_fax=0 to emailFax!.size()-1 step 3
            reportControl!.addToDocQueue(emailFax!.get(email_fax),emailFax!.get(email_fax+1),"",emailFax!.get(email_fax+2))    
        next email_fax
    endif  

all_done: rem --- Exit

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status

    reportControl!.destroy(err=*next)    
    masterViewerWindow!.destroy(err=*next)
    printViewerWindow!.destroy(err=*next)

    if tcb(13) then exit
    
    release

close_print_win: rem --- close the Print Copy; no updating, just close the print copy window

    printViewerWindow!.destroy(err=*next)
    print_win_closed=1
    
    return

open_tables: rem --- Open Tables

	call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		table_chans$[all],
:		open_batch,
:		open_status$

	if open_status$<>""
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
        msg_tokens$[1]=open_status$
		gosub disp_message
		goto std_exit
	endif

	return

disp_message: rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bac_message.bbj",
:		msg_id$,
:		msg_tokens$[all],
:		msg_opt$,
:		table_chans$[all]

	return

rem --- Functions

    def fnline2y%(tmp0)=(tmp0*12)+12+top_of_detail+2


rem --- fngetPattern$: Build iReports 'Pattern' from Addon Mask
	def fngetPattern$(q$)
		q1$=q$
		if len(q$)>0
			if pos("-"=q$)
				q1=pos("-"=q$)
				if q1=len(q$)
					q1$=q$(1,len(q$)-1)+";"+q$; rem Has negatives with minus at the end =>> ##0.00;##0.00-
				else
					q1$=q$(2,len(q$)-1)+";"+q$; rem Has negatives with minus at the front =>> ##0.00;-##0.00
				endif
			endif
			if pos("CR"=q$)=len(q$)-1
				q1$=q$(1,pos("CR"=q$)-1)+";"+q$
			endif
			if q$(1,1)="(" and q$(len(q$),1)=")"
				q1$=q$(2,len(q$)-2)+";"+q$
			endif
		endif
		return q1$
	fnend	
	
rem #include std_error.src

std_error: rem --- Standard error handler (18Nov2014)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$=""
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:       str(err),rd_err_text$,rd_err_act$
std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next

std_exit_no_report: 

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    release

rem #endinclude std_end.src

    end
