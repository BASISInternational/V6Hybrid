REM /**
REM  * AvaTaxCalculation.aon - initial prototype code for calling AvaTax from V6
REM  * Copyright BASIS International Ltd.
REM  *
REM  */

use java.lang.Object
use java.lang.Boolean
use java.math.BigDecimal
use java.text.SimpleDateFormat
use java.util.HashMap

use com.google.gson.JsonObject
use com.google.gson.JsonParser
use org.apache.commons.lang3.StringUtils

use com.fasterxml.jackson.databind.ObjectMapper
use com.fasterxml.jackson.databind.SerializationFeature

use net.avalara.avatax.rest.client.AvaTaxClient
use net.avalara.avatax.rest.client.enums.AvaTaxEnvironment
use net.avalara.avatax.rest.client.enums.DocumentType
use net.avalara.avatax.rest.client.enums.TransactionAddressType
use net.avalara.avatax.rest.client.models.AddressesModel
use net.avalara.avatax.rest.client.models.AddressLocationInfo
use net.avalara.avatax.rest.client.models.CommitTransactionModel
use net.avalara.avatax.rest.client.models.CreateTransactionModel 
use net.avalara.avatax.rest.client.models.ExemptionStatusModel
use net.avalara.avatax.rest.client.models.LineItemModel
use net.avalara.avatax.rest.client.models.TransactionModel
use net.avalara.avatax.rest.client.models.TransactionLineModel

use ::REST/BBWebClient.bbj::BBWebClient
use ::REST/BBWebClient.bbj::BBWebRequest
use ::REST/BBWebClient.bbj::BBWebResponse

rem --- Invoice header comes in: A0$,A[ALL]
rem --- Incoming inv_tax_rate is the rate Addon associates with the invoice A0$(80,2);defaults to customer tax code, but can be overriden
rem --- Send back tax_trans_created$, tax_calculated
rem --- Begin by getting/looking up the ship-to address (one ship-to per order/invoice in Addon)
rem --- Next, look for exemption cert for this customer based on ship-to zip.
rem     Display status to user so they can decide whether or not to call out to AvaTaxClient:
rem     1. dflt tax rate in Addon for cust is 0, and there's a valid exemption (normal); call AvaTax or exit
rem     2. dflt tax rate in Addon for cust is 0, but no exemption found (anamoly); enter cert# or entity/use code to send to AvaTax, or call AvaTax as is (incur tax), or exit
rem     3. dflt tax rate in Addon for cust <> 0, and no exemption found (normal); call AvaTax or exit
rem     4. dflt tax rate in Addon for cust <> 0, and there's a valid exemption (anamoly); call AvaTax or exit (TODO later phase, may be able to provide a tax override?)

rem --- Finally, do tax calculation. If user elects to just exit w/o doing tax calculation, then set tax_trans_created$ to "X".
rem     Caller (OPE.CE) should remove the invoice print record (are-04) if tax_trans_created$="X" so invoice can't go on through to print/update without an official AvaTax transaction.

rem --- If a transaction is created, return tax_trans_created$="Y" and the tax_calculated to the caller.

rem --- TODO Other processes need to happen - in Sales Reg/Update, a transaction we've previously created needs to be 'committed', and we'll also need to handle refund/void 
rem --- Can *test* the commit process by doing the calculation, then typing "commit" back at the caller's 4000 (data ok?) routine, which calls into the invoice_commit routine of this program.

invoice_entry:
enter arm01_dev,are03_dev,are13_dev,ivm01_dev,ivm10_dev,arm03_dev,are33_dev,A0$,A[all],inv_tax_rate,tax_trans_created$,tax_calculated

ARE03A: IOLIST A0$,A[ALL]
ARE13A: IOLIST W0$(1),W1$(1),W[ALL]
IVM01A: IOLIST X$,D1$(1),D2$(1),X$,D4$(1),X$,X$,D[ALL]
IVM10C: IOLIST DEFLT_WHS$
ARSHIP: IOLIST X$,X1$

DEF FNM$(Q$)=Q$(5,2)+Q$(1,4)
DEF FNA$(Q$,Q2$)=STR(MOD((ASC(Q$)-32)*POS(" "<>Q2$(2,1)),100):"00")
DEF FNC$(Q1$)=FNA$(Q1$(2),Q1$)+FNA$(Q1$(3),Q1$)+FNA$(Q1$(1),Q1$)

DIM W[14],L[20],D[12],W0$(52),W1$(64),D1$(60),D2$(62),D4$(21)

are03_key$=A0$(1,20)
cust_id$=are03_key$(1,2)+are03_key$(5,6)
addr_tpl$="ADDR1:C(24),ADDR2:C(24),ADDR3:C(24),CITY:C(24),STATE:C(2),ZIP:C(5),COUNTRY:C(2)"
tax_trans_created$=""
tax_calculated=0

rem --- main processing

gosub getShipToAddress
gosub checkExemptionStatus
gosub calculateTax
gosub updateTransHistory
gosub closeTables

exit

getShipToAddress:
    rem --- Order header's customer ship-to number (A0$(102,6)) is blank if ship-to is same as the bill-to from arm-01 (customer master), or
    rem     contains code to arm-03 (ship-to addresses), or '000099' if a manual ship-to address is recorded in are-33.
    rem     If it contains a ship-to code, read arm-03, key=firm+cust+ship-to from are-03.
    rem     If it's a manual ship-to, read are-33, key=firm+customer+order#.
    rem     Once we have ship-to address, need to gosub getCityStateCountry so we can check for a valid exemption certificate.

    dim shipto_addr$:addr_tpl$
    zip$=""

    switch num(A0$(102,6))
        case 0
            rem --- get customer's bill-to if ship-to is blank
            read(arm01_dev,key=cust_id$,dom=*break)IOL=ARSHIP
            zip$=X1$(103,9)
            shipto_addr.addr1$=X1$(31,24),shipto_addr.addr2$=X1$(55,24),shipto_addr.addr3$=X1$(79,24)
        break
        case 99
            rem --- get manual ship-to from are-33
            read(are33_dev,key=cust_id$+A0$(11,7),dom=*break)IOL=ARSHIP
            zip$=X1$(103,9)
            shipto_addr.addr1$=X1$(31,24),shipto_addr.addr2$=X1$(55,24),shipto_addr.addr3$=X1$(79,24)
        break
        case default
            rem --- get customer ship-to from arm-03
            read(arm03_dev,key=cust_id$+A0$(102,6),dom=*break)IOL=ARSHIP
            zip$=X1$(103,9)
            shipto_addr.addr1$=X1$(31,24),shipto_addr.addr2$=X1$(55,24),shipto_addr.addr3$=X1$(79,24)    
        break
    swend

    gosub getCityStateCountry
    if city$<>"" and state$<>"" and country$<>""
        shipto_addr.city$=city$,shipto_addr.state$=state$,shipto_addr.zip$=zip$,shipto_addr.country$=country$
    else
        x=msgbox("Invalid ship-to address based on zip code: "+$22$+zip$+"."+$22$+" Correct and try again.")
        tax_trans_created$="X"
    endif
return

checkExemptionStatus:
    rem --- if ship-to addr wasn't valid, we've set tax_trans_created$="X", so won't execute this routine.
    rem --- otherwise, should come out with tax_trans_created$="Y" or "N" depending on whether or not user opted to calculate tax.
    if tax_trans_created$<>"X"
        cert_status$="X"
        wintitle$="Customer Exemption Check"
        tax_trans_created$=""

        rem --- creates our AvaTaxclient!
        rem --- TODO need to anticipate connection or other errors that could cause any of these method calls to fail
        client! = new AvaTaxClient("AddonSoftware", "6.0", "localhost", AvaTaxEnvironment.Sandbox).withSecurity("pyeomans@basis.com", "Aval@raTe5t!ng");rem --- TODO get from config
        esm! = new ExemptionStatusModel()
        esm!=client!.listValidCertificatesForCustomer(2129534,cust_id$,country$,state$,err=*next);rem --- TODO get companyID from config
        if esm!.getStatus()<>null() then cert_status$=iff(esm!.getStatus()="Exempt","Y","N")

        if !inv_tax_rate
            if cert_status$="Y"
                tax_trans_created$="N"
                dim msg_lines$[1]
                num_lines=1
                user_sel$=""
                user_key=0
                msg_lines$[0]="Addon tax rate for customer is 0, valid exemption found."
                msg_lines$[1]="T=Calculate tax for exempt customer, F4=Exit: "
                call "SYC.XB",wintitle$,msg_lines$[all],num_lines,-1,-1,1,user_sel$,user_key
                if pos(user_sel$="Tt") then tax_trans_created$="Y"
            else
                tax_trans_created$="N"
                cert_no$=""
                entity_use$=""
                dim msg_lines$[4]
                num_lines=4
                user_sel$=""
                user_key=0
                msg_lines$[0]="Addon tax rate for customer is 0, but no valid exemption found."
                msg_lines$[1]="Sales tax may be assessed unless you provide a certificate number."
                msg_lines$[2]="Enter a certificate number to be used for tax calculation, or"
                msg_lines$[3]="F1=assign default 'RESALE' Entity/Use Code,"
                msg_lines$[4]="F2=Calculate tax 'as is', F4=Exit: "
                call "SYC.XB",wintitle$,msg_lines$[all],num_lines,-1,-1,15,user_sel$,user_key
                if user_sel$<>""
                    cert_no$=user_sel$
                    tax_trans_created$="Y"
                else
                    if user_key=1
                        entity_use$="G";rem --- TODO should allow entry of any valid entity/use code - can query AvaTax to get them, or store locally (G=RESALE)
                        tax_trans_created$="Y"
                    else
                        if user_key=2
                            tax_trans_created$="Y"
                        endif
                    endif
                endif
            endif
        else
            rem --- Addon carries a non-zero tax rate for this customer
            if cert_status$<>"Y"
                tax_trans_created$="N"
                dim msg_lines$[1]
                num_lines=1
                user_sel$=""
                user_key=0
                msg_lines$[0]="Addon tax rate for customer is non-zero, no valid exemption found."
                msg_lines$[1]="T=Calculate tax for non-exempt customer, F4=Exit: "
                call "SYC.XB",wintitle$,msg_lines$[all],num_lines,-1,-1,1,user_sel$,user_key
                if pos(user_sel$="Tt") then tax_trans_created$="Y"
            else
                tax_trans_created$="N"
                cert_no$=""
                entity_use$=""
                dim msg_lines$[3]
                num_lines=3
                user_sel$=""
                user_key=0
                msg_lines$[0]="Addon tax rate for customer is non-zero, but a valid exemption was found."
                msg_lines$[1]="Sales tax likely will not be assessed."
                msg_lines$[2]="If this customer should be taxed, exit and correct/delete exemption."
                msg_lines$[3]="T=Calculate tax for exempt customer, F4=Exit"
                call "SYC.XB",wintitle$,msg_lines$[all],num_lines,-1,-1,1,user_sel$,user_key
                if pos(user_sel$="Tt") then tax_trans_created$="Y"
            endif
        endif
    endif
return

calculateTax:
    rem --- If tax_trans_created$="Y" send a transaction to AvaTax and return tax to caller 
    if tax_trans_created$="Y"
        tax_calculated=0
        client! = new AvaTaxClient("AddonSoftware", "6.0", "localhost", AvaTaxEnvironment.Sandbox).withSecurity("pyeomans@basis.com", "Aval@raTe5t!ng");rem TODO get from config
        ctm!=new CreateTransactionModel()
        tm!=new TransactionModel()
        tlm!=new TransactionLineModel()      
        
        rem --- set up the CreateTransactionModel
        invoice_date$=A0$(24,3)
        java_date$=fnm$(fnc$(invoice_date$))
        sdf!=new SimpleDateFormat("yyMMdd")

        ctm!.setCompanyCode("DEFAULT");rem --- TODO if user has >1 company in AvaTax, does that equate to firm (i.e., how to store/specify company code here other than DEFAULT)?
        ctm!.setCustomerCode(cust_id$)
        ctm!.setType(DocumentType.SalesInvoice)
        ctm!.setDate(sdf!.parse(java_date$))
        ctm!.setCode(A0$(1,2)+A0$(5,13)+A0$(42,7));rem --- firm, customer, order#, invoice#
        if A[2]<>0 then ctm!.setDiscount(new BigDecimal(cast(BBjNumber,A[2])))
        if entity_use$<>""
            ctm!.setEntityUseCode(entity_use$);rem --- can be used if no cert on file but want to declare customer as exempt
        else
            if cert_no$<>"" then ctm!.setExemptionNo(cert_no$);rem --- can be used if no cert on file but want to specify cust is exempt
        endif

        rem --- now create order lines, adding each LineItemModel into an array 
        rem --- phase 1 forces default P0000000 tax code on all invoice lines under assumption majority of sales/customers are exempt
        rem     TODO will need to build out local tables to carry tax code per item, or tax code per a category of items
        
        whse_addrs!=new HashMap()
        linesArray!=new java.util.ArrayList()
        addrs!=new AddressesModel()
        rem --- create addrTo! outside the loop - all lines will have same ship-to
        addrTo!=new AddressLocationInfo()
        addrTo!.setLine1(shipto_addr.addr1$)
        addrTo!.setLine2(shipto_addr.addr2$)
        addrTo!.setLine3(shipto_addr.addr3$)
        addrTo!.setCity(shipto_addr.city$)
        addrTo!.setRegion(shipto_addr.state$)
        addrTo!.setPostalCode(shipto_addr.zip$)
        addrTo!.setCountry(shipto_addr.country$)
        
        addrs!.setShipTo(addrTo!)
                    
        read(are13_dev,key=are03_key$(1,17),dom=*next)
        
        while 1

            W0$(1)="",W1$(1)="";dim W[14]
            dim whse_addr$:addr_tpl$
            are13_key$=key(are13_dev,end=*break)
            read(are13_dev)IOL=ARE13A
            if W0$(1,17)<>are03_key$(1,17) then break

            line!=new LineItemModel()
            gosub getShipFromAddr
            if tax_trans_created$="X" then break;rem --- found bad warehouse address, so abort line processing

            rem --- get item (for description)... currently assumes Sale or Non-stock only
            rem     TODO will need to handle all line types (S=sale,N=non-stock,O=other,M=memo(skip these),P=special)
            rem     TODO need to research O and P line types to see if they carry items/descriptions?
            item_id$="",item_desc$=""
            if cvs(W0$(33,20),3)<>""
                read(ivm01_dev,key=W0$(1,2)+W0$(33,20))IOL=IVM01A
                item_id$=cvs(W0$(33,20),3),item_desc$=cvs(D1$,3)
            else
                item_desc$=cvs(W1$(1,40),3),item_id$=item_desc$;rem for non-stock no item IDs, so set same as description
            endif
            
            line!.setNumber(W0$(18,3))
            line!.setAmount(new BigDecimal(cast(BBjNumber,W[7])))
            line!.setQuantity(new BigDecimal(cast(BBjNumber,W[4])))
            line!.setTaxCode("PP210000");rem --- hard coded initially (P0000000); TODO need to get from new table(s) that associate item or item category w/ tax code            
            line!.setItemCode(item_id$)
            line!.setDescription(item_desc$)
            if A[2]<>0 then line!.setDiscounted(new Boolean("TRUE"))
            line!.setAddresses(addrs!)            
            linesArray!.add(line!)
        wend
        
        if tax_trans_created$<>"X"
            rem --- final line item for freight, if <>0. TODO need to let user select/specify freight code, or will FR020100 be OK?
            rem --- testing if there's freight AND if there's at least one other line... would anyone ever invoice just for freight?
            if A[1]<>0 and linesArray!.size()>=1
                line!=new LineItemModel()
                line!.setNumber("FRT")
                line!.setAmount(new BigDecimal(cast(BBjNumber,A[1])))
                line!.setQuantity(new BigDecimal(1))
                line!.setTaxCode("FR020100");rem --- hard coded initially; TODO need to get from new table(s) that associate item or item category w/ tax code            
                line!.setItemCode("Freight")
                line!.setAddresses(addrs!)

                linesArray!.add(line!)            
            endif
            
            rem --- now add lines to the createTransactionModel and create the transaction
            ctm!.setLines(linesArray!)
            tm!=client!.createTransaction("",ctm!,err=*next)
            if tm!.getCode()=null()
                x=msgbox("Unanticpated error calling for tax calculation: "+$0A$+errmes(-1)+$0A0A$+"Tax has not been calculated. Correct and try again.")
                tax_trans_created$="X"
                escape;rem check stuff...temp TODO remove this escape when ready
            else
                tax_calculated=tm!.getTotalTax()
            endif
        endif
    endif
return

getShipFromAddr:
    addrFrom!=new AddressLocationInfo()
    rem --- look up warehouse address first time a particular warehouse is encountered; store in HashMap for quick access thereafter
    if whse_addrs!.get(W0$(31,2))=null()
        read(ivm10_dev,key=W0$(1,2)+"C"+W0$(31,2))DEFLT_WHS$
        zip$=DEFLT_WHS$(136,9)
        gosub getCityStateCountry
        shipfrom_zip$=zip$
        if city$="" or state$="" or country$=""
            x=msgbox("Invalid ship-to address based on zip code: "+$22$+zip$+"."+$22$+" Correct and try again.")
            tax_trans_created$="X"
        else
            whse_addr.addr1$=DEFLT_WHS$(30,24),whse_addr.addr2$=DEFLT_WHS$(54,24),whse_addr.addr3$=DEFLT_WHS$(78,24),whse_addr.city$=city$,whse_addr.state$=state$,whse_addr.zip$=shipfrom_zip$,whse_addr.country$=country$
            whse_addrs!.put(DEFLT_WHS$(4,2),whse_addr$)
        endif
    endif

    if tax_trans_created$<>"X"
        whse_addr$=whse_addrs!.get(W0$(31,2))
        addrFrom!.setLine1(whse_addr.addr1$)
        addrFrom!.setLine2(whse_addr.addr2$)
        addrFrom!.setLine3(whse_addr.addr3$)
        addrFrom!.setCity(whse_addr.city$)
        addrFrom!.setRegion(whse_addr.state$)
        addrFrom!.setPostalCode(whse_addr.zip$)
        addrFrom!.setCountry(whse_addr.country$)

        addrs!.setShipFrom(addrFrom!)
    endif
return
        
updateTransHistory:

    if tax_trans_created$="Y" or tax_trans_committed$="Y"
        rem --- Write to our Sales Tax Transaction History files
        rem     Key to a sequential ID, and have alt key of tm!.getCode()+date(0:"%Yd%Mz%Dz%Hz%mz%sz") so we can see multiple calls for same invoice,
        rem     ideally just two - one when invoicing, and another to commit during sales reg/updt
        rem     NOTE: these are vkeyed files; the template is stored in the file (rather than entering in V6 dictionary). For a Barista Addon install, template will be in Barista and BASIS DD's as usual.
        
        files=2;dim files$[files],options$[files],channels[files],templates$[files]
        files$[1]="OPT_INVTAXHDR"
        files$[2]="OPT_INVTAXDET"
        call "SYC.DA",1,1,files,files$[all],options$[all],channels[all],batch,status
        if status>0
            x=msgbox("Unable to open Tax Transaction History files (OPT_INVTAXHDR, OPT_INVTAXDET).")
        else
            opt_invtaxhdr=channels[1]
            opt_invtaxdet=channels[2]
        endif

        for wk=1 to files
            wchan=channels[wk]
            templates$[wk]=BBjAPI().getFileSystem().getFileInfo(wchan).getText()
        next wk

        dim opt_invtaxhdr$:templates$[1]
        dim opt_invtaxdet$:templates$[2]
        
        tran_seq=0;dim wk$(12)
        wk$=keyl(opt_invtaxhdr,err=*next)
        tran_seq$=str(num(wk$(3))+1:"0000000000");rem --- TODO this is a cheat while testing... need to store/retrieve this using config file.
        
        opt_invtaxhdr.firm_id$=A0$(1,2)
        opt_invtaxhdr.tran_seq$=tran_seq$
        opt_invtaxhdr.rec_code$=tm!.getCode()
        opt_invtaxhdr.tran_date$=date(0:"%Yd%Mz%Dz%Hz%mz%sz")
        opt_invtaxhdr.tran_type$=tm!.getType().toString()
        opt_invtaxhdr.tran_status$=tm!.getStatus().toString()
        opt_invtaxhdr.tran_inv_date$=tm!.getDate().toString()
        opt_invtaxhdr.ent_use_cd$=tm!.getEntityUseCode()
        opt_invtaxhdr.exempt_no$=tm!.getExemptNo()
        opt_invtaxhdr.tot_amount=tm!.getTotalAmount()
        opt_invtaxhdr.tot_discount=tm!.getTotalDiscount()
        opt_invtaxhdr.tot_exempt=tm!.getTotalExempt()
        opt_invtaxhdr.tot_taxable=tm!.getTotalTaxable()
        opt_invtaxhdr.tot_tax=tm!.getTotalTax()

        writerecord(opt_invtaxhdr)opt_invtaxhdr$
        
        rem --- now do tm!.getLines() to get array of TransactionLineModels, and write out line level history as well
       
        lines!=tm!.getLines()
        if lines!.size()=0
            rem --- TODO exception here - no lines came back?
        else
            next_seq=1
            seq_mask$=fill(len(opt_invtaxdet.sequence_no$),"0")

            for wk=0 to lines!.size()-1
                redim opt_invtaxdet$
                tlm!=new TransactionLineModel()
                tlm!=lines!.get(wk)
                
                opt_invtaxdet.firm_id$=A0$(1,2)
                opt_invtaxdet.tran_seq$=tran_seq$
                opt_invtaxdet.sequence_no$=str(next_seq:seq_mask$)
                opt_invtaxdet.line_no$=tlm!.getLineNumber()
                opt_invtaxdet.line_item_cd$=tlm!.getItemCode()
                opt_invtaxdet.line_desc$=iff(tlm!.getDescription()=null(),"",tlm!.getDescription())
                opt_invtaxdet.line_qty=tlm!.getQuantity()
                opt_invtaxdet.line_amt=tlm!.getLineAmount()
                opt_invtaxdet.line_disc=tlm!.getDiscountAmount()
                opt_invtaxdet.line_exempt=tlm!.getExemptAmount()
                opt_invtaxdet.line_taxable=tlm!.getTaxableAmount()
                opt_invtaxdet.line_tax=tlm!.getTax()
                opt_invtaxdet.line_tax_cd$=tlm!.getTaxCode()
                opt_invtaxdet.exempt_no$=tlm!.getExemptNo()
                opt_invtaxdet.ent_use_cd$=tlm!.getEntityUseCode()
                writerecord(opt_invtaxdet)opt_invtaxdet$
                next_seq=next_seq+1
            next wk
        endif
        gosub logJSONResponse
    endif
return

getCityStateCountry:rem --- zip$ is incoming; this service only validates a 5-digit zip

    city$="",state$="",country$=""
    zip$=cvs(zip$,3)
    if len(zip$)>=5
        zip$=zip$(1,5)
        serverUrl$ 	= "http://ziptasticapi.com/"+cvs(zip$,3)
        webclient!	 	= new BBWebClient()
        request! 	= new BBWebRequest()
        request!	.addHeader("Content-Type",	"application/json")
        request!	.setURI(serverUrl$)

        response! = webclient!.sendRequest(request!)
        statusCode = response!.getStatusCode()

        if statusCode<>200 then return

        jsonElement! = new JsonParser().parse(response!.getBody())
        if jsonElement!.get("error")=null()
            state$ 		= jsonElement!.get("state").toString().replace(CHR(34),"")
            city$ 		= jsonElement!.get("city").toString().replace(CHR(34),"")
            country$	= jsonElement!.get("country").toString().replace(CHR(34),"")
        endif
    endif
return

logJSONResponse:

    rem --- append to daily log..(space consideration?) TODO may want to zip individual files and store path in above response header file so we can keep them longer
    tm$=tm!.toString()
    line_end$=System.getProperty("line.separator")

    myObj!=new Object()
    JsonMapper! = new ObjectMapper()
    JsonMapper!.enable(SerializationFeature.INDENT_OUTPUT)
    
    myObj!=JsonMapper!.readValue(tm$,myObj!.class)
    response$=JsonMapper!.writerWithDefaultPrettyPrinter().writeValueAsString(myObj!)+line_end$
    
    log_file$="C:/aon600/avalara/log/transLog_"+date(0:"%Y%Mz%Dz")+".txt";rem --- TODO set this up to use mkdir to someplace (maybe specified in config)
    log_chan=unt
    open(log_chan,MODE="O_APPEND,O_CREATE")log_file$
    writerecord(log_chan)response$
return

closeTables:
    close(log_chan,err=*next)
    close(opt_invtaxhdr,err=*next)
    close(opt_invtaxdet,err=*next)
return

invoice_commit:
enter A0$
client! = new AvaTaxClient("Test", "1.0", "localhost", AvaTaxEnvironment.Sandbox).withSecurity("pyeomans@basis.com", "Aval@raTe5t!ng")		 

commTrans!=new CommitTransactionModel()
commTrans!.setCommit(new Boolean("TRUE"))
tm!=new TransactionModel()

tm!=client!.commitTransaction("DEFAULT",A0$(1,2)+A0$(5,13)+A0$(42,7),DocumentType.SalesInvoice,"",commTrans!,err=*next)
tax_trans_committed$=""
if tm!.getCode()=null()
    rem --- TODO this code will likely be called from sales register/update, so rather than a message, just log any failures (i.e., don't want to interrupt the update).
    x=msgbox("Unanticpated error committing invoice tax transaction: "+$0A$+errmes(-1)+$0A0A$+"Transaction may not have been committed.")
    escape;rem check stuff...temp TODO remove this escape when ready
else
    tax_trans_committed$="Y"
    gosub updateTransHistory
    gosub closeTables    
endif


exit

