rem Callpoint program for ADX_V6DEMOYEAR - V6 Change Demo Data Year
rem Program adx_v6demoyear_cpt.bbj
rem Barista Application Framework.  Copyright BASIS International Ltd.

	seterr std_error
	setesc std_error

	use ::sys/prog/bao_callpoint.bbj::Callpoint
	declare Callpoint Callpoint!

	enter
:		Callpoint!,
:		bar_tpl$,
:		BarObj!,
:		user_tpl$,
:		UserObj!,
:		gui_dev,
:		SysGUI!,
:		Form!,
:		rec_data$,
:		table_chans$[all],
:		dtlg_param$[all],
:		GridVect!,
:		OrigVect!,
:		hrec_data$[all],
:		hattr_col$[all],
:		err=*next

rem --- Directory STBLs

	dir_pgm$=stbl("+DIR_SYP")
	dir_frm$=stbl("+DIR_FRM")
	dir_img$=stbl("+DIR_IMG")
	dir_wrk$=stbl("+DIR_WRK")

rem --- Retrieve sysinfo Data

	sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=*next)
	firm_id$=sysinfo.firm_id$

rem --- Get Translator Object

	use ::bbtranslator.bbj::BBTranslator
	declare BBTranslator Translate!
	rdTransSpaceKey$="V6Hybrid_"+stbl("+USER_LOCALE")+"_BBTranslator"
	Translate!=cast(BBTranslator,BBjAPI().getGroupNamespace().getValue(rdTransSpaceKey$,err=*next))
	if Translate!=null()
	    Translate!=BBTranslator.getInstance("V6Hybrid",stbl("+USER_LOCALE"),null(),"../apps/V6Hybrid/prop/")
	    BBjAPI().getGroupNamespace().setValue(rdTransSpaceKey$,Translate!)
	endif

rem --- Callpoints and tables handled by this program

	callpoint_event$=pad(Callpoint!.getCallpointEvent(),40)

	callpoint_event_str$=
:		pad("ADX_V6DEMOYEAR.AREC",40)+
:		pad("ADX_V6DEMOYEAR.ASHO",40)+
:		pad("ADX_V6DEMOYEAR.BSHO",40)

	switch fnstr_pos(callpoint_event$,callpoint_event_str$,40)
		case fnstr_pos(pad("ADX_V6DEMOYEAR.AREC",40),callpoint_event_str$,40)			
			rem -- show current fiscal year
			
			cur_fiscal_yr$=callpoint!.getDevObject("cur_fiscal_yr")
			callpoint!.setColumnData("ADX_V6DEMOYEAR.CURRENT_YEAR",cur_fiscal_yr$)
		break
		case fnstr_pos(pad("ADX_V6DEMOYEAR.ASHO",40),callpoint_event_str$,40)			
			rem --- verify working with demo data, not production data
			
			msg_id$="DEMO_DATA_ONLY"
			gosub disp_message
			if msg_opt$="C"
				rem --- remove process bar:
				bbjAPI!=bbjAPI()
				rdFuncSpace!=bbjAPI!.getGroupNamespace()
				rdFuncSpace!.setValue("+build_task","OFF")
				release
			endif
		break
		case fnstr_pos(pad("ADX_V6DEMOYEAR.BSHO",40),callpoint_event_str$,40)			
			rem --- open SYS-01 to get GL params (current fiscal per/yr)
			
			
			GLS01A: IOLIST A0$,A1$,A2$(1)
			
				dim A2$(10)
				files=1
				begfile=files,endfile=files,action=1
				dim files$[files],options$[files],channels[files]
				files$[1]="SYS-01"
				call "SYC.DA",action,begfile,endfile,files$[all],options$[all],channels[all],batch,status
				if status then escape 
				cal_dev=channels[1]
			
				find (cal_dev,key=firm_id$+"GL00",err=std_missing_params)IOL=GLS01A
			
				callpoint!.setDevObject("cur_fiscal_yr",A2$(5,2))
				close(cal_dev,err=*next)
		break

		case default
		break
	swend

rem --- All done

	goto std_exit

rem [[ADX_V6DEMOYEAR.<CUSTOM>]]

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(2) = 0 and tcb(5) then rd_err_text$ = pgm(tcb(5), tcb(13), err=*next)
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:                                   str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit:
    
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
    
std_missing_params_release:

    status=999
    if pgm(-1)<>pgm(-2) exit 
    release

rem #endinclude std_missing_params.src


	DEF FNYY_YY21$(Q1$)                                                       
	LET Q3$=" ABCDE56789ABCDEFGHIJ",Q1$(1,1)=Q3$(POS(Q1$(1,1)=" 0123456789ABCDEFGHIJ"))                                                                
	RETURN Q1$                                                                
	FNEND                                                                     

REM " --- FNYY21_YY$ Un-Convert 21st Century 2-Char Year to 2-Char Year"  
	DEF FNYY21_YY$(Q1$)                                                       
	LET Q3$=" 01234567890123456789",Q1$(1,1)=Q3$(POS(Q1$(1,1)=" 0123456789ABCDEFGHIJ"))                                                                
	RETURN Q1$                                                                
	FNEND                                                                     

REM " --- FNYY_YEAR Convert 2-Char Year to 21st Century Numeric Year"     
	DEF FNYY_YEAR(Q1$)                                                        
	LET Q=NUM(FNYY21_YY$(Q1$)); IF Q<50 THEN LET Q=Q+100                      
	RETURN Q                                                                  
	FNEND                                                                     


open_tables:rem --- Open Tables

	call stbl("+DIR_SYP")+"bac_open_tables.bbj",
:		open_beg,
:		open_end,
:		open_tables$[all],
:		open_opts$[all],
:		open_chans$[all],
:		open_tpls$[all],
:		table_chans$[all],
:		open_batch,
:		open_status$

	if open_status$<>"" then
		msg_id$="ENTRY_OPEN_ERROR"
		dim msg_tokens$[1]
		msg_tokens$[1]=open_status$
		gosub disp_message
		rdFuncSpace!=BBjAPI().getGroupNamespace().setValue("+build_task","OFF")
		release
	endif

	return

disp_message:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]

	return

disp_msg:rem --- Display Message Dialog

	call stbl("+DIR_SYP")+"bam_message.bbj",gui_dev,msg_title$,msg_text$,msg_defs$,msg_opt$

	return

disp_meter:rem --- Display Progress Meter

	call dir_pgm$+"bam_prog_bar.bbj",SysGUI!,Form!,MeterWin!,meter_title$,meter_total_recs,meter_proc_recs,meter_data$,meter_action$

	return

rem --- Functions

	def fnstr_pos(str_pos_att0$,str_pos_att1$,str_pos_att1)=int((pos(str_pos_att0$=str_pos_att1$,str_pos_att1)+str_pos_att1-1)/str_pos_att1)
	def fngett_attr$(gett_attr_att0$)=attr_tbl$[fnstr_pos(gett_attr_att0$,attr_def_tbl$[0,0],5)]
	def fngetc_attr$(getc_attr_att0,getc_attr_att0$)=attr_col$[getc_attr_att0,fnstr_pos(getc_attr_att0$,attr_def_col$[0,0],5)]
	def fngetv_attr$(getv_attr_att0$,getv_attr_att1$)=attr_col$[fnstr_pos(getv_attr_att0$,attr_col$[0,1],40),fnstr_pos(getv_attr_att1$,attr_def_col$[0,0],5)]
	def fnget_rec$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),0]
	def fnget_rec_orig$(get_rec_att0$)=rec_data$[fnstr_pos(get_rec_att0$,rec_data$[0,0],40),1]
	def fnget_hrec$(hrec_att0$)=hrec_data$[fnstr_pos(hrec_att0$,hrec_data$[0,0],40),0]
	def fndate$(date_att0$)=date(jul(num(date_att0$(1,4)),num(date_att0$(5,2)),num(date_att0$(7,2))):stbl("+DATE_MASK"))
	def fnget_dev(tmp0$)=num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3))
	def fnget_tpl$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),0]
	def fnget_path$(tmp0$)=table_chans$[num(table_chans$[0,0](pos(pad(tmp0$,17)=table_chans$[0,0],20)+17,3)),1]
	def fnmdy$(tmp0$)=tmp0$(5,4)+tmp0$(1,4)

std_error: rem --- Standard error handler (01Apr2006)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

	err_text$=""
    if tcb(2) = 0 and tcb(5) then err_text$ = pgm(tcb(5), tcb(13), err=*next)
	pgmdir$=stbl("+DIR_SYP",err=std_error_exit)
	call pgmdir$+"bac_error.bbj",err=std_error_exit,pgm(-2),str(tcb(5):"00000"),str(err:"000"),err_text$,err_act$,lock_byte,lock_chan
	if pos("EXIT"=err_act$) then goto std_error_exit
	if pos("ESCAPE"=err_act$) then seterr 0;setesc 0
	if pos("RETRY"=err_act$) then retry

std_error_exit:

	master_user$=cvs(stbl("+MASTER_USER",err=std_error_release),2)
	sysinfo_template$=stbl("+SYSINFO_TPL",err=std_error_release)
	dim sysinfo$:sysinfo_template$
	sysinfo$=stbl("+SYSINFO",err=std_error_release)
	if cvs(sysinfo.user_id$,2)=master_user$ then escape

std_error_release:

	status=999
	if pgm(-1)<>pgm(-2) then exit
	release

std_exit: rem --- Standard called program exit (01Mar2006)

	exit

