rem AddonSoftware
rem Copyright BASIS International Ltd.
rem 
rem instead of read
rem This trigger assumes that it is being used in a non-modified Barista and Addon
rem Version 6 environment. If there have been any modifications to these systems,
rem be sure to thoroughly examine this trigger and test changes.

rem --- Read Barista Addon's apm_vendmast instead of V6 apm-01

	setopts $080872202c2e$
	seterr trigger_error

    info!=BBjAPI().getCurrentSessionInfo()
    grpID$=str(info!.getGroupID())   
    sessionID$=str(info!.getSessionID())
    nskey$="APM01"+"_"+grpID$+"_"+sessionID$

    rem ' trace
    goto skip_trace;rem this line (and change pathname as applicable) to do the trace
    tfl$="C:/temp/apm01.ir."+grpID$+"_"+sessionID$+"_"+str(fpt(tim))+".txt"
    erase tfl$,err=*next
    string tfl$
    tfl=unt
    open(tfl)tfl$
    settrace(tfl,MODE="UNTIMED")
skip_trace:
	
rem ---  Get the Trigger object from the BBj File System

    td! = BBjAPI().getFileSystem().getTriggerData()

    keyed_read=0
	ky$=td!.getKey(err=non_keyed_read)
    keyed_read=1
    
non_keyed_read: rem --- if read doesn't have key=k$, will need to get ky$ from namespace rather than td!.getKey()
    if !keyed_read
        rem --- get key from namespace
        gns!=BBjAPI().getGroupNamespace()
        ky$ = gns!.getValue(nskey$,err=*next)
        rem --- if previous key read took us to EOF, namespace will contain special value to indicate that
        if ky$=nskey$+"**EOF"
            err_num=2
            goto trigger_error_forced
        endif
    endif
	
	wkdir$ = dir("")
	apdir$ = stbl("+APDATA")

rem --- Template for the APM-01 record being caught

	intemp$="firm_id:c(2),vendor_nbr:c(6*=10),vendor_name:c(30),addr_line_1:c(24),addr_line_2:c(24),addr_line_3:c(24),zip_code:c(9),"
	intemp$=intemp$+"phone_number:c(10),phone_exten:c(4),contact_name:c(20),alt_sequence:c(10),opened_date:c(3),hold_flag:c(1),"
	intemp$=intemp$+"federal_id:c(15),vend_1099:c(1),vendor_acct:c(10),fax_number:c(10),fob:c(15),ap_ship_via:c(15),reserved_str:c(20*=10)"
	dim inRec$:intemp$

rem --- Open Barista Vendor Master table

	apm_vendmast=unt
	open (apm_vendmast,err=trigger_error)apdir$+"apm-01"
	tpl_dev=unt
	open (tpl_dev,err=trigger_error) wkdir$+"sys/data/ddm_table_tpls.dat"
	read (tpl_dev,key=pad("APM_VENDMAST",16),dom=trigger_error) *,*,apm_vendmast_tpl$
	dim apm_vendmast$:apm_vendmast_tpl$
	
rem --- Get the data

    dom_flag=1

    if ky$="" and keyed_read=0
        read record (apm_vendmast,end=trigger_error) apm_vendmast$; dom_flag=0
    else
        read record (apm_vendmast,key=ky$,dom=*next) apm_vendmast$; dom_flag=0
    endif

    if dom_flag=0
        inRec.firm_id$ = apm_vendmast.firm_id$
        inRec.vendor_nbr$=apm_vendmast.vendor_id$
        inRec.vendor_name$=apm_vendmast.vendor_name$
        inRec.addr_line_1$=apm_vendmast.addr_line_1$
        inRec.addr_line_2$=apm_vendmast.addr_line_2$
        st$=iff(cvs(apm_vendmast.state_code$,3)="","",", "+apm_vendmast.state_code$)
        addr3$=iff(cvs(apm_vendmast.city$,3)+st$="","",cvs(apm_vendmast.city$,3)+st$)
        if len(addr3$)>24
            inRec.addr_line_3$=cvs(apm_vendmast.city$,3)(1,24-len(st$))+st$
        else
            inRec.addr_line_3$=addr3$
        endif
        inRec.zip_code$=apm_vendmast.zip_code$
        inRec.phone_number$=apm_vendmast.phone_no$
        inRec.phone_exten$=apm_vendmast.phone_exten$
        inRec.contact_name$=apm_vendmast.contact_name$
        inRec.alt_sequence$=apm_vendmast.alt_sequence$
        inRec.opened_date$=fnd$(apm_vendmast.opened_date$)
        inRec.hold_flag$=apm_vendmast.hold_flag$
        inRec.federal_id$=apm_vendmast.federal_id$
        inRec.vend_1099$=apm_vendmast.vendor_1099$
        inRec.vendor_acct$=apm_vendmast.vendor_acct$
        inRec.fax_number$=apm_vendmast.fax_no$
        inRec.fob$=apm_vendmast.fob$
        inRec.ap_ship_via$=apm_vendmast.ap_ship_via$
        
        if cvs(inRec.addr_line_2$,3)=""
            inRec.addr_line_2$=inRec.addr_line_3$
            inRec.addr_line_3$=""
        endif
    endif

    next_ky$=nskey$+"**EOF";rem --- set default in case we take the end=
    next_ky$=key(apm_vendmast,end=*next)

    rem --- store key info in group namespace (for looping back to k$=key() in calling code)
    gns!=BBjAPI().getGroupNamespace()
    gns!.setValue(nskey$,next_ky$)
    
    if dom_flag=1
        err_num=11
        goto trigger_error_forced
    else
        td!.setReadBuffer(inRec$)
        goto std_exit
    endif

trigger_error:

    rd_err_text$="", err_num=err
    
trigger_error_forced:

    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=11
        rem -- if we took the DOM above, store the partial key in group namespace for upcoming k$=key in calling code
        gns!=BBjAPI().getGroupNamespace()
        gns!.setValue(nskey$,next_ky$)
	endif
    throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
	
rem --- Functions

	rem --- fnyy$ returns a 2 character year (A0-E9) from a 4 character year
	def fnyy$(q1$)
		q3$=" ABCDE56789ABCDEFGHIJ"
		q1$(1,1)=q3$(pos(q1$(1,1)=" 0123456789ABCDEFGHIJ"))
		return q1$
	fnend

	rem --- returns a 3 character packed date from an 8 character year/month/day
	def fnd$(q$)
		q$=pad(q$,8)
		if cvs(q$,2)="" return "   "
		q1$=chr(num(q$(5,2))+32)+chr(num(q$(7,2))+32)
		if q$(1,2)="19"
			q2$=chr(num(q$(3,2))+32)
		else
			q2$=chr(num(q$(3,2))+132)
		endif
		return q2$+q1$
	fnend
	
std_exit: