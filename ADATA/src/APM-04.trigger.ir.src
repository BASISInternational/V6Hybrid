rem AddonSoftware
rem Copyright BASIS International Ltd.
rem 
rem instead of read
rem This trigger assumes that it is being used in a non-modified Barista and Addon
rem Version 6 environment. If there have been any modifications to these systems,
rem be sure to thoroughly examine this trigger and test changes.

rem --- When reading V6 APM-04 Vendor Xref, read Barista Addon apm_vendmast instead, using appropriate knum
rem --- A for Alt Seq, B for Zip Code

	setopts $080872202c2e$
	seterr trigger_error

    info!=BBjAPI().getCurrentSessionInfo()
    grpID$=str(info!.getGroupID())   
    sessionID$=str(info!.getSessionID()) 
    nskey$="APM04"+"_"+grpID$+"_"+sessionID$

    rem ' trace
    goto skip_trace;rem this line (and change pathname as applicable) to do the trace
    tfl$="C:/temp_downloads/apm-04.ir."+grpID$+"_"+sessionID$+"_"+str(fpt(tim))+".txt"
    erase tfl$,err=*next
    string tfl$
    tfl=unt
    open(tfl)tfl$
    settrace(tfl,MODE="UNTIMED")
skip_trace:
	
rem ---  Get the Trigger object from the BBj File System

    td! = BBjAPI().getFileSystem().getTriggerData()

    keyed_read=0
	ky$=td!.getKey(err=non_keyed_read)
    keyed_read=1
    
non_keyed_read: rem --- if read doesn't have key=k$, will need to get ky$ from namespace rather than td!.getKey()
    if !keyed_read
        rem --- get partial/trip-read or last full key from namespace
        gns!=BBjAPI().getGroupNamespace()
        ky$ = gns!.getValue(nskey$,err=*next)
        rem --- if previous key read took us to EOF, namespace will contain special value to indicate that
        if ky$=nskey$+"**EOF"
            err_num=2
            goto trigger_error_forced
        endif
    endif

	wkdir$ = dir("")
	apdir$ = stbl("+APDATA")

rem --- Template for the APM-04 key being caught

    switch pos(ky$(3,1)="AB")
        case 1;rem A=alt seq xref
            xref_key$="AO_ALTSEQ_VEND"
            intemp$="firm_id:c(2),record_id:c(1),alt_sequence:c(10),vendor_nbr:c(6)"
        break
        case 2;rem B=zip code xref
            xref_key$="AO_ZIP_VEND"
            intemp$="firm_id:c(2),record_id:c(1),zip_code:c(9),vendor_nbr:c(6)"
        break
    swend

	dim inRec$:intemp$
	
rem --- Open Barista Vendor Master file

	apm_vendmast=unt
	open (apm_vendmast,err=trigger_error)apdir$+"apm-01"
	tpl_dev=unt
	open (tpl_dev,err=trigger_error) wkdir$+"sys/data/ddm_table_tpls.dat"
	read (tpl_dev,key=pad("APM_VENDMAST",16),dom=trigger_error) *,*,apm_vendmast_tpl$
	dim apm_vendmast$:apm_vendmast_tpl$
	
rem --- Get the data

    dom_flag=1

    if ky$="" and keyed_read=0
        read record (apm_vendmast,knum=xref_key$,end=trigger_error) apm_vendmast$; dom_flag=0
    else
    rem --- incoming key contains A or B to match APM-04 format - strip it out
        if len(ky$)>3
            trip_key$=ky$(1,2)+ky$(4)
        else
            trip_key$=ky$(1,2)
        endif

        read record (apm_vendmast,key=trip_key$,knum=xref_key$,dom=*next) apm_vendmast$; dom_flag=0
    endif
    
    if dom_flag=0
        inRec.firm_id$ = apm_vendmast.firm_id$
        inRec.record_id$ = ky$(3,1)
        inRec.vendor_nbr$ = apm_vendmast.vendor_id$

        switch pos(ky$(3,1)="AB")
            case 1;rem A=alt seq xref
                inRec.alt_sequence$ = apm_vendmast.alt_sequence$
            break
            case 2;rem B=zip code xref
                inRec.zip_code$ = apm_vendmast.zip_code$
            break
        swend
    endif

    next_ky$=nskey$+"**EOF";rem --- set default in case we take the end=
    next_ky$=key(apm_vendmast,end=store_key)
    next_ky$=next_ky$(1,2)+ky$(3,1)+next_ky$(3)

store_key:    
    rem --- store next key in group namespace
    gns!=BBjAPI().getGroupNamespace()
    gns!.setValue(nskey$,next_ky$)

    if dom_flag=1
        err_num=11
        goto trigger_error_forced
    else
        td!.setReadBuffer(inRec$)
        goto std_exit
    endif

trigger_error:

    rd_err_text$="", err_num=err

trigger_error_forced:

    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=11
        rem --- if we took the DOM above, store the next key in group namespace
        gns!=BBjAPI().getGroupNamespace()
        gns!.setValue(nskey$,next_ky$)
	endif
    throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
    
rem --- Functions

	rem --- fnyy$ returns a 2 character year (A0-E9) from a 4 character year
	def fnyy$(q1$)
		q3$=" ABCDE56789ABCDEFGHIJ"
		q1$(1,1)=q3$(pos(q1$(1,1)=" 0123456789ABCDEFGHIJ"))
		return q1$
	fnend
	
std_exit: