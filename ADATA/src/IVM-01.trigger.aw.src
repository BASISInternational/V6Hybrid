rem AddonSoftware
rem Copyright BASIS International Ltd.
rem 
rem after write
rem This trigger assumes that it is being used in a non-modified Barista and Addon
rem Version 6 environment. If there have been any modifications to these systems,
rem be sure to thoroughly examine this trigger and test changes.

rem --- Trigger for V6 AvaTax Interface
rem --- Write Barista Addon's ivm_itemmast after writing V6's IVM-01

	setopts $080872202c2e$
	seterr trigger_error

    rem ' trace
    goto skip_trace;rem this line (and change pathname as applicable) to do the trace
    tfl$="C:/temp/ivm01triggertrace_V6.txt"
    erase tfl$,err=*next
    string tfl$
    tfl=unt
    open(tfl)tfl$
    settrace(tfl,MODE="UNTIMED")
skip_trace:

rem ---  Get the Trigger object from the BBj File System

    td! = BBjAPI().getFileSystem().getTriggerData()

	wkdir$ = dir("")
	ivdir$ = stbl("+IVDATA")

rem --- Template for the V6 IVM-01 record being caught

    intemp$="firm_id:c(2),item_number:c(20*=10),item_desc:c(60*=10),product_type:c(3),unit_of_sale:c(2),"
    intemp$=intemp$+"purchase_um:c(2),taxable_flag:c(1),buyer_code:c(3),vendor_nbr:c(6),sa_level:c(1),"
    intemp$=intemp$+"lotser_item:c(1),inventoried:c(1),item_class:c(3),stock_level:c(1),abc_code:c(1),"
    intemp$=intemp$+"eoq_code:c(1),ord_pnt_code:c(1),saf_stk_code:c(1),lstrec_date:c(3),lstblt_date:c(3),"
    intemp$=intemp$+"lstsal_date:c(3),lstiss_date:c(3),lstadj_date:c(3),lstxin_date:c(3),lstxot_date:c(3),"
    intemp$=intemp$+"lstret_date:c(3),item_type:c(3),reserved_str_01:c(7*=10),upc_code:c(20),bar_code:c(20*=10),"
    intemp$=intemp$+"alt_sup_flag:c(1),alt_sup_item:c(20*=10),dealer_str:c(1*=10),gl_inv_acct:c(10),gl_cogs_acct:c(10),"
    intemp$=intemp$+"gl_pur_acct:c(10),gl_ppv_acct:c(10),gl_inv_adj:c(10),gl_cogs_adj:c(10),reserved_str_02:c(30*=10),"
    intemp$=intemp$+"conv_factor:n(7*=10),weight:n(7*=10),msrp:n(7*=10),maximum_qty:n(7*=10),order_point:n(7*=10),"
    intemp$=intemp$+"safety_stock:n(7*=10),eoq:n(7*=10),lead_time:n(7*=10),reserved_num_01:n(1*=10),"
    intemp$=intemp$+"reserved_num_02:n(1*=10),reserved_num_03:n(1*=10),dealer_num_01:n(1*=10),dealer_num_02:n(1*=10)"

	dim inRec$:intemp$
    inRec$=td!.getWriteBuffer()

rem --- Open Barista Addon IVM_ITEMMAST and get its template

	ivm_itemmast=unt
	open (ivm_itemmast)ivdir$+"ivm-01"
	tpl_dev=unt
	open (tpl_dev,err=trigger_error) wkdir$+"sys/data/ddm_table_tpls.dat"
	read (tpl_dev,key=pad("IVM_ITEMMAST",16),dom=trigger_error) *,*,ivm_itemmast_tpl$
	dim ivm_itemmast$:ivm_itemmast_tpl$
	
rem --- Write the data

    ivm_itemmast.firm_id$=inRec.firm_id$
    ivm_itemmast.item_id$=inRec.item_number$
    
    readrecord(ivm_itemmast,key=ivm_itemmast.firm_id$+ivm_itemmast.item_id$,dom=*next)ivm_itemmast$
    
    ivm_itemmast.item_desc$=inRec.item_desc$
    ivm_itemmast.product_type$=inRec.product_type$
    ivm_itemmast.unit_of_sale$=inRec.unit_of_sale$
    ivm_itemmast.purchase_um$=inRec.purchase_um$
    ivm_itemmast.taxable_flag$=inRec.taxable_flag$
    ivm_itemmast.buyer_code$=inRec.buyer_code$
    ivm_itemmast.vendor_id$=inRec.vendor_nbr$
    ivm_itemmast.sa_level$=inRec.sa_level$
    ivm_itemmast.lotser_item$=inRec.lotser_item$
    ivm_itemmast.inventoried$=inRec.inventoried$
    ivm_itemmast.item_class$=inRec.item_class$
    ivm_itemmast.stock_level$=inRec.stock_level$
    ivm_itemmast.abc_code$=inRec.abc_code$
    ivm_itemmast.eoq_code$=inRec.eoq_code$
    ivm_itemmast.ord_pnt_code$=inRec.ord_pnt_code$
    ivm_itemmast.saf_stk_code$=inRec.saf_stk_code$
    ivm_itemmast.item_type$=inRec.item_type$
    ivm_itemmast.lstrec_date$=fnfulldate$(inRec.lstrec_date$)
    ivm_itemmast.lstblt_date$=fnfulldate$(inRec.lstblt_date$)
    ivm_itemmast.lstsal_date$=fnfulldate$(inRec.lstsal_date$)
    ivm_itemmast.lstiss_date$=fnfulldate$(inRec.lstiss_date$)
    ivm_itemmast.lstadj_date$=fnfulldate$(inRec.lstadj_date$)
    ivm_itemmast.lstxin_date$=fnfulldate$(inRec.lstxin_date$)
    ivm_itemmast.lstxot_date$=fnfulldate$(inRec.lstxot_date$)
    ivm_itemmast.lstret_date$=fnfulldate$(inRec.lstret_date$)
    ivm_itemmast.upc_code$=inRec.upc_code$
    ivm_itemmast.bar_code$=inRec.bar_code$
    ivm_itemmast.alt_sup_flag$=inRec.alt_sup_flag$
    ivm_itemmast.alt_sup_item$=inRec.alt_sup_item$
    ivm_itemmast.gl_inv_acct$=inRec.gl_inv_acct$
    ivm_itemmast.gl_cogs_acct$=inRec.gl_cogs_acct$
    ivm_itemmast.gl_pur_acct$=inRec.gl_pur_acct$
    ivm_itemmast.gl_ppv_acct$=inRec.gl_ppv_acct$
    ivm_itemmast.gl_inv_adj$=inRec.gl_inv_adj$
    ivm_itemmast.gl_cogs_adj$=inRec.gl_cogs_adj$
    ivm_itemmast.conv_factor$=inRec.conv_factor$
    ivm_itemmast.weight$=inRec.weight$
    ivm_itemmast.msrp$=inRec.msrp$
    ivm_itemmast.maximum_qty$=inRec.maximum_qty$
    ivm_itemmast.order_point$=inRec.order_point$
    ivm_itemmast.safety_stock$=inRec.safety_stock$
    ivm_itemmast.eoq$=inRec.eoq$
    ivm_itemmast.lead_time$=inRec.lead_time$

    ivm_itemmast$=field(ivm_itemmast$)
    writerecord (ivm_itemmast)ivm_itemmast$

	goto std_exit

rem --- Functions

rem --- convert V6 3-char packed date to YYYYMMDD
    def fnfulldate$(value$)=str(asc(value$)-32+1900)+str(asc(value$(2))-32:"00")+str(mod(asc(value$(3))-32,100):"00")

trigger_error:

    rd_err_text$="", err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
	
std_exit: