rem AddonSoftware
rem Copyright BASIS International Ltd.
rem 
rem instead of write
rem This trigger assumes that it is being used in a non-modified Barista and Addon
rem Version 6 environment. If there have been any modifications to these systems,
rem be sure to thoroughly examine this trigger and test changes.

rem --- Write Barista Addon's apt_invoicedist instead of V6 apt-02

	setopts $080872202c2e$
	seterr trigger_error

    info!=BBjAPI().getCurrentSessionInfo()
    grpID$=str(info!.getGroupID())   
    sessionID$=str(info!.getSessionID())
    nskey$="APT02"+"_"+grpID$+"_"+sessionID$

    rem ' trace
    goto skip_trace;rem this line (and change pathname as applicable) to do the trace
    tfl$="C:/temp_downloads/apt02.iw."+grpID$+"_"+sessionID$+"_"+str(fpt(tim))+".txt"
    erase tfl$,err=*next
    string tfl$
    tfl=unt
    open(tfl)tfl$
    settrace(tfl,MODE="UNTIMED")
skip_trace:
	
rem ---  Get the Trigger object from the BBj File System

    td! = BBjAPI().getFileSystem().getTriggerData()

    ky$=td!.getKey()
    
	wkdir$ = dir("")
	apdir$ = stbl("+APDATA")

rem --- Template for the APT-02 record being caught

    intemp$="firm_id:c(2),ap_type:c(2),vendor_nbr:c(6),invoice_type:c(1),reference:c(10),gl_account:c(10),"
    intemp$=intemp$+"accting_date:c(3*=10),gl_post_amt:n(7*=10),units:n(7*=10)"

	dim inRec$:intemp$
    inRec$=td!.getWriteBuffer()

rem --- Open Barista AP Invoice GL Distribution table

	apt_invoicedist=unt
	open (apt_invoicedist,err=trigger_error)apdir$+"apt-02"
	tpl_dev=unt
	open (tpl_dev,err=trigger_error) wkdir$+"sys/data/ddm_table_tpls.dat"
	read (tpl_dev,key=pad("APT_INVOICEDIST",16),dom=trigger_error) *,*,apt_invoicedist_tpl$
	dim apt_invoicedist$:apt_invoicedist_tpl$
	
rem --- Write the data

    apt_invoicedist.firm_id$=inRec.firm_id$
    apt_invoicedist.ap_type$=inRec.ap_type$
    apt_invoicedist.vendor_id$=inRec.vendor_nbr$
    apt_invoicedist.invoice_type$=inRec.invoice_type$
    apt_invoicedist.reference$=inRec.reference$
    apt_invoicedist.gl_account$=inRec.gl_account$
    value$=inRec.accting_date$
    gosub fix_ymd_date
    apt_invoicedist.accting_date$=value$
    apt_invoicedist.gl_post_amt=inRec.gl_post_amt
    apt_invoicedist.units=inRec.units
    
    apt_invoicedist$=field(apt_invoicedist$)

    if td!.getDOM()
        writerecord (apt_invoicedist,dom=trigger_error)apt_invoicedist$
    else
        writerecord (apt_invoicedist)apt_invoicedist$
    endif
    

    next_ky$=nskey$+"**EOF";rem --- set default in case we take the end=
    next_ky$=key(apt_invoicedist,end=*next)
    rem --- store next key in group namespace
    gns!=BBjAPI().getGroupNamespace()
    gns!.setValue(nskey$,next_ky$)

    rem --- remove soft lock from namespace

    exns_prefix$=stbl("+DBNAME_API",err=trigger_error)
    exns_suffix$="apt-02"
    exns!=BBjAPI().getNamespace(exns_prefix$,exns_suffix$,1)
    ns_info$="V6 namespace lock: "+info!.getUser()+": "+td!.getIDString()

    set_lock=0
    exns!.setLock(ky$,5000,err=*next);set_lock=1
    if set_lock        
        ex_info$=exns!.getValue(ky$,err=*next)
        if ex_info$="" or ex_info$=ns_info$
            exns!.removeLock(ky$)
            exns!.removeValue(ky$,err=*endif)
        else
            exns!.removeLock(ky$)
        endif
    else
        ex_info$=exns!.getValue(ky$,err=*next)
        rd_err_text$=ex_info$+" (Key: "+ky$+")."
        err_num=0
        goto trigger_error_forced
    endif

	goto std_exit

fix_ymd_date: rem --- Convert ymd packed dates to yyyymmdd
    rem ---     Input/Out: value$
    if len(cvs(value$,3)) then
        value$=str(asc(value$)-32+1900)+str(asc(value$(2))-32:"00")+str(mod(asc(value$(3))-32,100):"00")
    else
        value$=pad("",8)
    endif
    return

trigger_error:

    rd_err_text$="", err_num=err

trigger_error_forced:

    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=11
        rem -- if we took the DOM above, store the partial key in group namespace for upcoming k$=key in calling code
        gns!=BBjAPI().getGroupNamespace()
        gns!.setValue(nskey,ky$)
	endif
    throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
	
rem --- Functions

	rem --- fnyy$ returns a 2 character year (A0-E9) from a 4 character year
	def fnyy$(q1$)
		q3$=" ABCDE56789ABCDEFGHIJ"
		q1$(1,1)=q3$(pos(q1$(1,1)=" 0123456789ABCDEFGHIJ"))
		return q1$
	fnend

    rem --- FNYEAR_YY21$ Convert Numeric Year to 21st Century 2-Char Year"   
    def FNYEAR_YY21$(Q)=FNYY_YY21$(STR(MOD(Q,100):"00"))
   
    rem --- FNYY_YY21$ Convert 2-Char Year to 21st Century 2-Char Year
	def FNYY_YY21$(Q1$)
	Q3$=" ABCDE56789ABCDEFGHIJ",Q1$(1,1)=Q3$(POS(Q1$(1,1)=" 0123456789ABCDEFGHIJ"))
	return Q1$
	fnend

	rem --- returns a 3 character packed date from an 8 character year/month/day
	def fnd$(q$)
		q$=pad(q$,8)
		if cvs(q$,2)="" return "   "
		q1$=chr(num(q$(5,2))+32)+chr(num(q$(7,2))+32)
		if q$(1,2)="19"
			q2$=chr(num(q$(3,2))+32)
		else
			q2$=chr(num(q$(3,2))+132)
		endif
		return q2$+q1$
	fnend
	
std_exit: