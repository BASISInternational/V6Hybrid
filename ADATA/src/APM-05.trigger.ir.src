rem AddonSoftware
rem Copyright BASIS International Ltd.
rem 
rem instead of read
rem This trigger assumes that it is being used in a non-modified Barista and Addon
rem Version 6 environment. If there have been any modifications to these systems,
rem be sure to thoroughly examine this trigger and test changes.

rem --- Read Barista Addon's apm_vendaddr (Purchase Addresses) instead of V6 apm-05

	setopts $080872202c2e$
	seterr trigger_error

    info!=BBjAPI().getCurrentSessionInfo()
    grpID$=str(info!.getGroupID())
    sessionID$=str(info!.getSessionID())
    nskey$="APM05"+"_"+grpID$+"_"+sessionID$

    rem ' trace
    goto skip_trace;rem this out to do the trace
    tfl$="C:/temp_downloads/apm05.ir."+grpID$+"_"+sessionID$+"_"+str(fpt(tim))+".txt"
    erase tfl$,err=*next
    string tfl$
    tfl=unt
    open(tfl)tfl$
    settrace(tfl,MODE="UNTIMED")
skip_trace:
	
rem ---  Get the Trigger object from the BBj File System

    td! = BBjAPI().getFileSystem().getTriggerData()

    keyed_read=0
	ky$=td!.getKey(err=non_keyed_read)
    keyed_read=1
 
non_keyed_read: rem --- if read doesn't have key=k$, will need to get ky$ from namespace rather than td!.getKey()
    if !keyed_read
        gns!=BBjAPI().getGroupNamespace()
        ky$ = gns!.getValue(nskey$,err=*next)
        rem --- if previous key read took us to EOF, namespace will contain special value to indicate that
        if ky$=nskey$+"**EOF"
            err_num=2
            goto trigger_error_forced
        endif
    endif
	
	wkdir$ = dir("")
	apdir$ = stbl("+APDATA")

rem --- Template for the APM-05 record being caught

	intemp$="firm_id:c(2),vendor_nbr:c(6),purch_addr:c(2*=10),name:c(30),addr_line_1:c(24),addr_line_2:c(24),addr_line_3:c(24),zip_code:c(9),"
	intemp$=intemp$+"phone_number:c(10),phone_exten:c(4),contact_name:c(20),"
	intemp$=intemp$+"fax_number:c(10),reserved_str:c(5*=10)"
	dim inRec$:intemp$

rem --- Open Barista Vendor Purchase Address table

	apm_vendaddr=unt
	open (apm_vendaddr,err=trigger_error)apdir$+"apm-05"
	tpl_dev=unt
	open (tpl_dev,err=trigger_error) wkdir$+"sys/data/ddm_table_tpls.dat"
	read (tpl_dev,key=pad("APM_VENDADDR",16),dom=trigger_error) *,*,apm_vendaddr_tpl$
	dim apm_vendaddr$:apm_vendaddr_tpl$
	
rem --- Get the data

    dom_flag=1

    if ky$="" and keyed_read=0
        read record (apm_vendaddr,end=trigger_error) apm_vendaddr$; dom_flag=0
    else
        read record (apm_vendaddr,key=ky$,dom=*next) apm_vendaddr$; dom_flag=0
    endif
    
    if dom_flag=0
        inRec.firm_id$ = apm_vendaddr.firm_id$
        inRec.vendor_nbr$=apm_vendaddr.vendor_id$
        inRec.purch_addr$=apm_vendaddr.purch_addr$
        inRec.name$=apm_vendaddr.name$
        inRec.addr_line_1$=apm_vendaddr.addr_line_1$
        inRec.addr_line_2$=apm_vendaddr.addr_line_2$
        inRec.addr_line_3$=cvs(apm_vendaddr.city$,3)+", "+apm_vendaddr.state_code$
        inRec.zip_code$=apm_vendaddr.zip_code$
        inRec.phone_number$=apm_vendaddr.phone_no$
        inRec.phone_exten$=apm_vendaddr.phone_exten$
        inRec.contact_name$=apm_vendaddr.contact_name$
        inRec.fax_number$=apm_vendaddr.fax_no$
        
        if cvs(inRec.addr_line_2$,3)=""
            inRec.addr_line_2$=inRec.addr_line_3$
            inRec.addr_line_3$=""
        endif
    endif

    next_ky$=nskey$+"**EOF";rem --- set default in case we take the end=
    next_ky$=key(apm_vendaddr,end=*next)

    rem --- store next key in group namespace
    gns!=BBjAPI().getGroupNamespace()
    gns!.setValue(nskey$,next_ky$)

    if dom_flag=1
        err_num=11
        goto trigger_error_forced
    else
        td!.setReadBuffer(inRec$)
        goto std_exit
    endif

trigger_error:

    rd_err_text$="", err_num=err
    
trigger_error_forced:

    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=11
        rem --- if we took the DOM above, store the next key in group namespace
        gns!=BBjAPI().getGroupNamespace()
        gns!.setValue(nskey$,next_ky$)
	endif
    throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
	
rem --- Functions

	rem --- fnyy$ returns a 2 character year (A0-E9) from a 4 character year
	def fnyy$(q1$)
		q3$=" ABCDE56789ABCDEFGHIJ"
		q1$(1,1)=q3$(pos(q1$(1,1)=" 0123456789ABCDEFGHIJ"))
		return q1$
	fnend

	rem --- returns a 3 character packed date from an 8 character year/month/day
	def fnd$(q$)
		q$=pad(q$,8)
		if cvs(q$,2)="" return "   "
		q1$=chr(num(q$(5,2))+32)+chr(num(q$(7,2))+32)
		if q$(1,2)="19"
			q2$=chr(num(q$(3,2))+32)
		else
			q2$=chr(num(q$(3,2))+132)
		endif
		return q2$+q1$
	fnend
	
std_exit: