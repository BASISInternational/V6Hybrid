rem AddonSoftware
rem Copyright BASIS International Ltd.
rem 
rem instead of read
rem This trigger assumes that it is being used in a non-modified Barista and Addon
rem Version 6 environment. If there have been any modifications to these systems,
rem be sure to thoroughly examine this trigger and test changes.

rem --- Read Barista Addon's apt_invoicedist file; if trying to extract, check/set soft lock to ensure no collision w/ V6

	setopts $080872202c2e$
	seterr trigger_error

    info!=BBjAPI().getCurrentSessionInfo()
    grpID$=str(info!.getGroupID())
    sessionID$=str(info!.getSessionID())
    nskey$="V16apt02"+"_"+grpID$+"_"+sessionID$

    rem ' trace
    goto skip_trace;rem this line (and change pathname as applicable) to do the trace
    tfl$="C:/temp_downloads/V16apt02.br."+grpID$+"_"+sessionID$+"_"+str(fpt(tim))+".txt"
    erase tfl$,err=*next
    string tfl$
    tfl=unt
    open(tfl)tfl$
    settrace(tfl,MODE="UNTIMED")
skip_trace:
	
rem ---  Get the Trigger object from the BBj File System

    td! = BBjAPI().getFileSystem().getTriggerData()

    keyed_read=0
	ky$=td!.getKey(err=non_keyed_read)
    keyed_read=1

non_keyed_read: rem --- if read doesn't have key=k$, will need to get ky$ from namespace rather than td!.getKey()
    if !keyed_read
        gns!=BBjAPI().getGroupNamespace()
        ky$ = gns!.getValue(nskey$,err=*next)
        rem --- if previous key read took us to EOF, namespace will contain special value to indicate that
        if ky$=nskey$+"**EOF"
            err_num=2
            goto trigger_error_forced
        endif
    endif

	wkdir$ = dir("")
	apdir$ = stbl("+APDATA")

rem --- V6 writes this record when updating (PO Invoice Reg/Updt)
rem --- If doing an extract in Barista Addon, check for, and/or place a soft lock in a namespace.
rem --- V6 will do the same. The soft lock is needed since there's no way to get the V6 extract to persist across read/write triggers.

    extract_flag=td!.getExtract()
    exns_prefix$=stbl("+DBNAME_API",err=trigger_error)
    exns_suffix$="apt-02"
    exns!=BBjAPI().getNamespace(exns_prefix$,exns_suffix$,1)
    ns_info$="V16 namespace lock: "+info!.getUser()+": "+td!.getIDString()

    if extract_flag
        set_lock=0
        exns!.setLock(ky$,5000,err=*next);set_lock=1
        if set_lock
            ex_info$=exns!.getValue(ky$,err=*next)
            if ex_info$<>"" and ex_info$<>ns_info$
                exns!.removeLock(ky$)
                rd_err_text$=ex_info$+" (Key: "+ky$+")."
                err_num=0
                goto trigger_error_forced
            else
                exns!.setValue(ky$,ns_info$)
                exns!.removeLock(ky$)
            endif
        else
            ex_info$=exns!.getValue(ky$,err=*next)
            rd_err_text$=ex_info$+" (Key: "+ky$+")."
            err_num=0
            goto trigger_error_forced
        endif
    else
        set_lock=0
        exns!.setLock(ky$,5000,err=*next);set_lock=1
        if set_lock        
            ex_info$=exns!.getValue(ky$,err=*endif)
            if ex_info$="" or ex_info$=ns_info$
                exns!.removeLock(ky$)
                exns!.removeValue(ky$,err=*endif)
            else
                exns!.removeLock(ky$)
            endif
        else
            ex_info$=exns!.getValue(ky$,err=*next)
            rd_err_text$=ex_info$+" (Key: "+ky$+")."
            err_num=0
            goto trigger_error_forced
        endif
    endif

    if extract_flag=1
        next_ky$=ky$
        rem --- store extracted key in group namespace so it'll be available if extract is released with just a read()
        gns!=BBjAPI().getGroupNamespace()
        gns!.setValue(nskey$,next_ky$)
    endif

    goto std_exit

trigger_error:

    rd_err_text$="", err_num=err
    
trigger_error_forced:

    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num
	
std_exit: