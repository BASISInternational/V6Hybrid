rem AddonSoftware
rem Copyright BASIS International Ltd.
rem 
rem instead of key
rem This trigger assumes that it is being used in a non-modified Barista and Addon
rem with a non-modified Version 6 Addon. If there have been any modifications to
rem these systems, be sure to thoroughly examine this trigger and test changes.

rem --- Read V6 IVM-01 instead of Barista Addon's ivm_itemmast

	setopts $080872202c2e$
	seterr trigger_error

    info!=BBjAPI().getCurrentSessionInfo()
    grpID$=str(info!.getGroupID())   
    sessionID$=str(info!.getSessionID())
    nskey$="IVM01"+"_"+grpID$+"_"+sessionID$

    rem ' trace
    goto skip_trace;rem this out to do the trace
    tfl$="C:/temp_downloads/ivm01.ir."+grpID$+"_"+sessionID$+"_"+str(fpt(tim))+".txt"
    erase tfl$,err=*next
    string tfl$
    tfl=unt
    open(tfl)tfl$
    settrace(tfl,MODE="UNTIMED")
skip_trace:
	
rem ---  Get the Trigger object from the BBj File System

    td! = BBjAPI().getFileSystem().getTriggerData()
	
	wkdir$ = dir("")
	v6data_dir$=stbl("+V6DATA",err=std_exit)
    
    keyed_read=0
	ky$=td!.getKey(err=non_keyed_read)
    keyed_read=1
    
non_keyed_read: rem --- if read doesn't have key=k$, will need to get ky$ from namespace rather than td!.getKey()
    keyName$=td!.getKeyName()
    if !keyed_read
        rem --- get partial/trip-read or last full key from namespace
        gns!=BBjAPI().getGroupNamespace()
        ky$ = gns!.getValue(nskey$,err=*next)
        xPos=pos("::"=ky$)
        if xPos>1 then keyName$=ky$(1,xPos-1)
        if xPos>0 then ky$=ky$(xPos+2)
        
        rem --- if previous key read took us to EOF, namespace will contain special value to indicate that
        if ky$=nskey$+"**EOF"
            err_num=2
            goto trigger_error_forced
        endif
    endif

rem --- Template for the V6 IVM-01 record being read

	intemp$="firm_id:c(2),item_number:c(20*),item_desc:c(60*),"
    intemp$=intemp$+"product_type:c(3),unit_of_sale:c(2),purchase_um:c(2),taxable_flag:c(1),buyer_code:c(3),vendor_nbr:c(6),sa_level:c(1),"
    intemp$=intemp$+"lotser_item:c(1),inventoried:c(1),item_class:c(3),stock_level:c(1),abc_code:c(1),eoq_code:c(1),ord_pnt_code:c(1),saf_stk_code:c(1),"
    intemp$=intemp$+"lstrec_date:c(3),lstblt_date:c(3),lstsal_date:c(3),lstiss_date:c(3),lstadj_date:c(3),lstxin_date:c(3),lstxot_date:c(3),lstret_date:c(3),"
    intemp$=intemp$+"item_type:c(3),rsrvd_str:c(7*),"
    intemp$=intemp$+"upc_code:c(20),bar_code:c(20*),alt_sup_flag:c(1),alt_sup_item:c(20*),dealer_str:c(1*),"
    intemp$=intemp$+"gl_inv_acct:c(10),gl_cogs_acct:c(10),gl_pur_acct:c(10),gl_ppv_acct:c(10),gl_inv_adj:c(10),gl_cogs_adj:c(10),rsrvd_str_02:c(30*),"
    intemp$=intemp$+"conv_factor:n(7*),weight:n(7*),msrp:n(7*),maximum_qty:n(7*),order_point:n(7*),safety_stock:n(7*),eoq:n(7*),lead_time:n(7*),"
    intemp$=intemp$+"rsrvd_num_01:n(1*),rsrvd_num_02:n(1*),rsrvd_num_03:n(1*),dealer_num_01:n(1*),dealer_num_02:n(1*)"
	dim ivm01a$:intemp$

rem --- Get template for Barista Addon's IVM_ITEMMAST table

	tpl_dev=unt
	open (tpl_dev,err=trigger_error) wkdir$+"sys/data/ddm_table_tpls.dat"
	read (tpl_dev,key=pad("IVM_ITEMMAST",16),dom=trigger_error) *,*,ivm_itemmast_tpl$
	dim ivm_itemmast$:ivm_itemmast_tpl$

rem --- Open V6 IVM-01 file

	ivm01_dev=unt
	open (ivm01_dev,err=trigger_error)v6data_dir$+"IVM-01"
	
rem --- Get the data

    next_ky$=nskey$+"**EOF";rem --- set default in case we take an end= error branch
    dom_flag=1

    if ky$="" and keyed_read=0
        switch (BBjAPI().TRUE)
            case keyName$="PRIMARY"
            case default
                read record (ivm01_dev,end=trigger_error) ivm01a$; dom_flag=0
                break
            case keyName$="AO_VEND_ITEM"
                ivm03_dev=unt
                open (ivm03_dev,err=trigger_error)v6data_dir$+"IVM-03"
                read(ivm03_dev,key="",dom=*next)
                while 1
                    ivm03_key$=key(ivm03_dev,err=trigger_error)
                    if len(ivm03_key$)>=29 and  ivm03_key$(3,1)="D" then break
                    read(ivm03_dev,end=trigger_error)
                wend
                if len(ivm03_key$)>=29 and ivm03_key$(3,1)="D" then
                    this_ky$=ivm03_key$(1,2)+ivm03_key$(10)
                    read record (ivm01_dev,key=this_ky$,dom=*next) ivm01a$; dom_flag=0
                else
                    next_ky$=nskey$+"**EOF"
                    err_num=2
                    goto trigger_error_forced
                endif
                break
            case keyName$="AO_BUYR_VEND_ITM"
                ivm03_dev=unt
                open (ivm03_dev,err=trigger_error)v6data_dir$+"IVM-03"
                read(ivm03_dev,key="",dom=*next)
                while 1
                    ivm03_key$=key(ivm03_dev,err=trigger_error)
                    if len(ivm03_key$)>=37 and  ivm03_key$(3,1)="F" then break
                    read(ivm03_dev,end=trigger_error)
                wend
                if len(ivm03_key$)>=37 and ivm03_key$(3,1)="F" then
                    this_ky$=ivm03_key$(1,2)+ivm03_key$(16,20)
                    read record (ivm01_dev,key=this_ky$,dom=*next) ivm01a$; dom_flag=0
                else
                    next_ky$=nskey$+"**EOF"
                    err_num=2
                    goto trigger_error_forced
                endif
                break
        swend
    else
        switch (BBjAPI().TRUE)
            case keyName$="PRIMARY"
            case default
                read record (ivm01_dev,key=ky$,dom=*next) ivm01a$; dom_flag=0
                break
            case keyName$="AO_VEND_ITEM"
                ky_firm_id$=""
                ky_vendor_nbr$=""
                ky_item_number$=""
                ky_len=len(ky$)
                if ky_len>2 then
                    ky_firm_id$=ky$(1,2)
                    if ky_len>8 then
                        ky_vendor_nbr$=ky$(3,6)
                        ky_item_number$=ky$(9)
                    else
                        ky_vendor_nbr$=ky$(3)
                    endif
                else
                    ky_firm_id$=ky$
                endif
                
                ivm03_dev=unt
                open (ivm03_dev,err=trigger_error)v6data_dir$+"IVM-03"
                dim ivm01a$(29)
                read(ivm03_dev,key=ky_firm_id$+"D"+ky_vendor_nbr$+ky_item_number$,dom=*next)ivm03a$; dom_flag=0
                if dom_flag=0 then
                    dim this_ky$(22)
                    this_ky$(1,2)=ivm03a$(1,2); rem --- firm id
                    this_ky$(3,20)=ivm03a$(10,20); rem --- item number
                    read record (ivm01_dev,key=this_ky$,dom=*next) ivm01a$
                endif
                break
            case keyName$="AO_BUYR_VEND_ITM"
                ky_firm_id$=""
                ky_buyer_code$=""
                ky_vendor_nbr$=""
                ky_item_number$=""
                ky_len=len(ky$)
                if ky_len>2 then
                    ky_firm_id$=ky$(1,2)
                    if ky_len>5 then
                        ky_buyer_code$=ky$(3,3)
                        if key_len>11 then
                            ky_vendor_nbr$=ky$(6,6)
                            ky_item_number$=ky$(12)
                        else
                            ky_vendor_nbr$=ky$(6)
                        endif
                    else
                        ky_buyer_code$=ky$(3)
                    endif
                else
                    ky_firm_id$=ky$
                endif

                ivm03_dev=unt
                open (ivm03_dev,err=trigger_error)v6data_dir$+"IVM-03"
                dim ivm01a$(29)
                read(ivm03_dev,key=ky_firm_id$+"F"+ky_buyer_code$+ky_vendor_nbr$,dom=*next)
                if ky_item_number$<>"" then
                    while 1
                        read(ivm03_dev,end=*break)ivm03a$
                        if pos(ky_firm_id$+"F"+ky_buyer_code$+ky_vendor_nbr$=ivm03a$)<>1 then break
                        if pos(ky_item_number$=ivm03a$(16))=1 then
                            dom_flag=0
                            break
                        endif
                    wend
                endif
                if dom_flag=0 then
                    dim this_ky$(22)
                    this_ky$(1,2)=ivm03a$(1,2); rem --- firm id
                    this_ky$(3,20)=ivm03a$(16,20); rem --- item number
                    read record (ivm01_dev,key=this_ky$,dom=*next) ivm01a$
                endif
                break
        swend
    endif

    if dom_flag=0
        ivm_itemmast.firm_id$=ivm01a.firm_id$
        ivm_itemmast.item_id$=ivm01a.item_number$
        ivm_itemmast.item_desc$=ivm01a.item_desc$
        ivm_itemmast.product_type$=ivm01a.product_type$
        ivm_itemmast.unit_of_sale$=ivm01a.unit_of_sale$
        ivm_itemmast.purchase_um$=ivm01a.purchase_um$
        ivm_itemmast.taxable_flag$=ivm01a.taxable_flag$
        ivm_itemmast.buyer_code$=ivm01a.buyer_code$
        ivm_itemmast.vendor_id$=ivm01a.vendor_nbr$
        ivm_itemmast.sa_level$=ivm01a.sa_level$
        ivm_itemmast.lotser_item$=ivm01a.lotser_item$
        ivm_itemmast.inventoried$=ivm01a.inventoried$
        ivm_itemmast.item_class$=ivm01a.item_class$
        ivm_itemmast.stock_level$=ivm01a.stock_level$
        ivm_itemmast.abc_code$=ivm01a.abc_code$
        ivm_itemmast.eoq_code$=ivm01a.eoq_code$
        ivm_itemmast.ord_pnt_code$=ivm01a.ord_pnt_code$
        ivm_itemmast.saf_stk_code$=ivm01a.saf_stk_code$
        ivm_itemmast.item_type$=ivm01a.item_type$
        ivm_itemmast.lstrec_date$=fnymd_yyyymmdd$(ivm01a.lstrec_date$)
        ivm_itemmast.lstblt_date$=fnymd_yyyymmdd$(ivm01a.lstblt_date$)
        ivm_itemmast.lstsal_date$=fnymd_yyyymmdd$(ivm01a.lstsal_date$)
        ivm_itemmast.lstiss_date$=fnymd_yyyymmdd$(ivm01a.lstiss_date$)
        ivm_itemmast.lstadj_date$=fnymd_yyyymmdd$(ivm01a.lstadj_date$)
        ivm_itemmast.lstxin_date$=fnymd_yyyymmdd$(ivm01a.lstxin_date$)
        ivm_itemmast.lstxot_date$=fnymd_yyyymmdd$(ivm01a.lstxot_date$)
        ivm_itemmast.lstret_date$=fnymd_yyyymmdd$(ivm01a.lstret_date$)
        ivm_itemmast.upc_code$=ivm01a.upc_code$
        ivm_itemmast.bar_code$=ivm01a.bar_code$
        ivm_itemmast.alt_sup_flag$=ivm01a.alt_sup_flag$
        ivm_itemmast.alt_sup_item$=ivm01a.alt_sup_item$
        ivm_itemmast.gl_inv_acct$=ivm01a.gl_inv_acct$
        ivm_itemmast.gl_cogs_acct$=ivm01a.gl_cogs_acct$
        ivm_itemmast.gl_pur_acct$=ivm01a.gl_pur_acct$
        ivm_itemmast.gl_ppv_acct$=ivm01a.gl_ppv_acct$
        ivm_itemmast.gl_inv_adj$=ivm01a.gl_inv_adj$
        ivm_itemmast.gl_cogs_adj$=ivm01a.gl_cogs_adj$
        ivm_itemmast.image_path$=""
        ivm_itemmast.display_desc$=""
        ivm_itemmast.conv_factor=ivm01a.conv_factor
        ivm_itemmast.weight=ivm01a.weight
        ivm_itemmast.msrp=ivm01a.msrp
        ivm_itemmast.maximum_qty=ivm01a.maximum_qty
        ivm_itemmast.order_point=ivm01a.order_point
        ivm_itemmast.safety_stock=ivm01a.safety_stock
        ivm_itemmast.eoq=ivm01a.eoq
        ivm_itemmast.lead_time=ivm01a.lead_time
    endif

rem --- Get next key

    if !td!.getExtract() then
        next_ky$=nskey$+"**EOF";rem --- set default in case we take the end=
        
        switch (BBjAPI().TRUE)
            case keyName$="PRIMARY"
            case default
                next_ky$=key(ivm01_dev,end=*next)
                break
            case keyName$="AO_VEND_ITEM"
                this_key$=key(ivm03_dev,end=*break)
                dim next_ky$(28)
                next_ky$(1,2)=this_key$(1,2); rem --- firm id
                next_ky$(3,6)=this_key$(4,6); rem --- vendor nbr
                next_ky$(9,20)=this_key$(10,20); rem --- item number
                break
            case keyName$="AO_BUYR_VEND_ITM"
                this_key$=key(ivm03_dev,end=*break)
                dim next_ky$(31)
                next_ky$(1,2)=this_key$(1,2); rem --- firm id
                next_ky$(3,3)=this_key$(4,3); rem --- buyer code
                next_ky$(6,6)=this_key$(7,6); rem --- vendor nbr
                next_ky$(12,20)=this_key$(16,20); rem --- item number
                break
        swend
    else
        next_ky$=ky$
    endif

    rem --- store key info in group namespace (for looping back to k$=key() in calling code)
    gns!=BBjAPI().getGroupNamespace()
    gns!.setValue(nskey$,keyName$+"::"+next_ky$)
    
    if dom_flag=1
        err_num=11
        goto trigger_error_forced
    else
        td!.setReadBuffer(ivm_itemmast$)
        goto std_exit
    endif

trigger_error:

    rd_err_text$="", err_num=err
    
trigger_error_forced:

    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=11
        rem -- if we took the DOM above, store the partial key in group namespace for upcoming k$=key in calling code
        gns!=BBjAPI().getGroupNamespace()
        gns!.setValue(nskey$,keyName$+"::"+next_ky$)
	endif
    throw "["+pgm(-2)+"] "+str(tcb(5))+": "+rd_err_text$,err_num

rem --- Convert 3-Char YMD packed date to 21st Century 8-Char YYYYMMDD date
    def fnymd_yyyymmdd$(q$)
        if len(cvs(q$,3)) then
            q$=str(asc(q$)-32+1900)+str(asc(q$(2))-32:"00")+str(mod(asc(q$(3))-32,100):"00")
        else
            q$=pad("",8)
        endif
        return q$
        fnend
	
std_exit: